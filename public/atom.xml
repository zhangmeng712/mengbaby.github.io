<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萌小主前端部落</title>
  <subtitle>the more you know the more you know you don&#39;t know</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mengbaby.github.io/"/>
  <updated>2017-04-17T07:02:37.000Z</updated>
  <id>https://mengbaby.github.io/</id>
  
  <author>
    <name>Dr Meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端自动化测试（三）- angular和protracor</title>
    <link href="https://mengbaby.github.io/2016/03/10/678/"/>
    <id>https://mengbaby.github.io/2016/03/10/678/</id>
    <published>2016-03-09T20:53:58.000Z</published>
    <updated>2017-04-17T07:02:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://angular.github.io/protractor/#/" target="_blank">protractor</a>用于前端UI自动化测试,特别为angular程序定制</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>端对端(e2e)测试</li>
<li>采用jasmine作为测试框架</li>
<li>基于WebDriverJS,(selenium-webdriver)</li>
<li>针对angular应用增加定位器,更加方便实用</li>
<li>实现自动等待,告别sleep wait,变异步为同步</li>
<li>支持测试代码的调试</li>
<li>支持多浏览器的并行UI测试</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>1 安装protractor: npm install -g protractor</li>
<li>2 安装selenium-standlone: webdriver-manager update</li>
<li>3 启动selenium服务器: webdriver-manager start</li>
</ul>
<h3 id="spec书写"><a href="#spec书写" class="headerlink" title="spec书写"></a>spec书写</h3><p>spec.js是用于书写测试用例的文件, protractor默认使用jasmine作为测试框架,举最简单的例子来说,一个spec文件可以这样写,使用describe作为<br>测试程序”块”, it定义一个用例,expect作为断言,其中browser这个全局的变量,用于操作浏览器.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'Protractor Demo App'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'should have a title'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        browser.get(<span class="string">'http://juliemr.github.io/protractor-demo/'</span>);</div><div class="line">        expect(browser.getTitle()).toEqual(<span class="string">'Super Calculator'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul>
<li>配置conf.json<br>在测试之前,我们需要建立一个conf.json的文件,在这个文件中,可以配置测试的相关内容,例如:<ul>
<li>multiCapabilities:使用哪些浏览器测试</li>
<li>chromeOptions:chrome浏览器的运行参数(使用哪些插件等)</li>
<li>framework:使用哪种测试框架: cucumber macha 还是jasmine</li>
<li>specs:测试哪些文件<br>详细的配置信息请<a href="https://github.com/angular/protractor/blob/master/docs/referenceConf.js" target="_blank">参考</a></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">exports.config = &#123;</div><div class="line">   <span class="comment">// directConnect: true,</span></div><div class="line"></div><div class="line">    <span class="comment">// Capabilities to be passed to the webdriver instance.</span></div><div class="line">    <span class="comment">//capabilities: &#123;</span></div><div class="line">    <span class="comment">//    'browserName': 'chrome'</span></div><div class="line">    <span class="comment">//&#125;,</span></div><div class="line">    multiCapabilities: [ &#123;</div><div class="line">        <span class="string">'browserName'</span>: <span class="string">'chrome'</span>,</div><div class="line">        <span class="comment">//'chromeOptions': &#123;</span></div><div class="line">        <span class="comment">//    'args': ['--load-extension=/opt/local/share/nginx/html/radar/tanxtag'],</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">    &#125;],</div><div class="line">    <span class="comment">// Framework to use. Jasmine is recommended.</span></div><div class="line">    framework: <span class="string">'jasmine'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// Spec patterns are relative to the current working directly when</span></div><div class="line">    <span class="comment">// protractor is called.</span></div><div class="line">    specs: [<span class="string">'basic/demo_spec.js'</span>,<span class="string">'basic/angular_spec.js'</span>],</div><div class="line"></div><div class="line">    <span class="comment">// Options to be passed to Jasmine.</span></div><div class="line">    jasmineNodeOpts: &#123;</div><div class="line">        <span class="attr">defaultTimeoutInterval</span>: <span class="number">30000</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>运行测试程序</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protractor conf.json</div></pre></td></tr></table></figure>
<h3 id="grunt运行测试"><a href="#grunt运行测试" class="headerlink" title="grunt运行测试"></a>grunt运行测试</h3><p>有时我们需要使用grunt来配置测试任务,下面就是使用<a href="https://www.npmjs.com/package/grunt-concurrent" target="_blank">grunt-concurrent</a> 模块实现并行运行多浏览器(也可通过conf.json中配置multiCapabilities解决)测试程序的代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">//This module will read the dependencies/devDependencies/peerDependencies/optionalDependencies in your package.json</span></div><div class="line">    <span class="comment">// and load grunt tasks that match the provided patterns.</span></div><div class="line">    <span class="built_in">require</span>(<span class="string">'load-grunt-tasks'</span>)(grunt);</div><div class="line">    grunt.initConfig(&#123;</div><div class="line">        <span class="attr">concurrent</span>: &#123;</div><div class="line">            <span class="attr">protractor_test</span>: [<span class="string">'protractor-chrome'</span>, <span class="string">'protractor-firefox'</span>, <span class="string">'protractor-safari'</span>]</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">protractor</span>: &#123;</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                <span class="attr">keepAlive</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">singleRun</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">configFile</span>: <span class="string">"conf.js"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">run_chrome</span>: &#123;</div><div class="line">                <span class="attr">options</span>: &#123;</div><div class="line">                    <span class="attr">args</span>: &#123;</div><div class="line">                        <span class="attr">browser</span>: <span class="string">"chrome"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">run_firefox</span>: &#123;</div><div class="line">                <span class="attr">options</span>: &#123;</div><div class="line">                    <span class="attr">args</span>: &#123;</div><div class="line">                        <span class="attr">browser</span>: <span class="string">"firefox"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">run_safari</span>: &#123;</div><div class="line">                <span class="attr">options</span>: &#123;</div><div class="line">                    <span class="attr">args</span>: &#123;</div><div class="line">                        <span class="attr">browser</span>: <span class="string">"safari"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    grunt.registerTask(<span class="string">'protractor-chrome'</span>, [<span class="string">'protractor:run_chrome'</span>]);</div><div class="line">    grunt.registerTask(<span class="string">'protractor-firefox'</span>, [<span class="string">'protractor:run_firefox'</span>]);</div><div class="line">    grunt.registerTask(<span class="string">'protractor-safari'</span>, [<span class="string">'protractor:run_safari'</span>]);</div><div class="line">    grunt.registerTask(<span class="string">'protractor-e2e'</span>, [<span class="string">'concurrent:protractor_test'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="调试测试程序"><a href="#调试测试程序" class="headerlink" title="调试测试程序"></a>调试测试程序</h3><p>除了非常方便的运行机制,protractor还提供便捷的调试方式, 使用selenium-webdriver操纵浏览器的时候,调试是非常困难的,在这里protractor就提供调试方式<br>在代码中加入 browser.pause(); 并且在终端输入 “repl” 就可以使用WebDriver commands来调试程序了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wd-debug&gt; repl</div><div class="line">&gt; element</div><div class="line">function (locator) &#123;</div><div class="line">    return new ElementArrayFinder(ptor).all(locator).toElementFinder_();</div><div class="line">  &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="测试非angular的应用"><a href="#测试非angular的应用" class="headerlink" title="测试非angular的应用"></a>测试非angular的应用</h3><p>protractor内置方法测试angular的程序,例如它会自动检测angular页面加载完毕才会执行测试程序,当测试非angular程序的时候需要:</p>
<pre><code>- 1 使用 browser.driver 代替 driver
- 2 添加 browser.driver.ignoreSynchronization = true 
</code></pre><p><a href="https://github.com/sakshisingla/Protractor-Non-Angular-Tests/wiki/Creating-test-scripts-using-Protractor-for-non-angular-application" target="_blank">参考</a></p>
<h2 id="protractor的详细使用"><a href="#protractor的详细使用" class="headerlink" title="protractor的详细使用"></a>protractor的详细使用</h2><p>在protractor中,有几大类用于测试代码,详情请见<a href="https://angular.github.io/protractor/#/api" target="_blank">protractorAPI</a></p>
<ul>
<li>browser: 浏览器的操作</li>
<li>element &amp; by: 定位获取页面元素</li>
<li>ExpectedConditions:用于页面操作的逻辑函数,一般同wait连用</li>
<li>webdriver: selenium 原生的语法函数</li>
<li>promise:selenium内置的promise方法</li>
</ul>
<h3 id="浏览器的操作-browser"><a href="#浏览器的操作-browser" class="headerlink" title="浏览器的操作-browser"></a>浏览器的操作-browser</h3><p>常用操作代码如下:</p>
<ul>
<li>browser.get:</li>
<li>browser.findElement</li>
<li>browser.switchTo().frame()</li>
<li>browser.executeScript:</li>
<li>browser.executeAsyncScript</li>
<li>browser.wait:</li>
<li>browser.sleep:</li>
</ul>
<h3 id="选择器-by-amp-element"><a href="#选择器-by-amp-element" class="headerlink" title="选择器- by &amp; element"></a>选择器- by &amp; element</h3><p>支持多源选择器</p>
<ul>
<li>by.css()</li>
<li>by.id()</li>
<li>by.xpath()</li>
<li>by.name()</li>
<li>by.tagName()</li>
<li>by.model():angular专用</li>
<li>by.binding():angular专用</li>
<li>by.repeater():angular专用</li>
</ul>
<p>通过element获取:element(by.id(‘frameId’))或者element.all(by.css(‘some-css’));<br>在非angular应用中使用browser.driver.findElement(by.id(‘frameId’))</p>
<h3 id="ExpectedConditions"><a href="#ExpectedConditions" class="headerlink" title="ExpectedConditions"></a>ExpectedConditions</h3><p>预定义了wait的条件,常用的有</p>
<ul>
<li>elementToBeClickable: 按钮可以点击</li>
<li>presenceOf: 元素出现在dom中</li>
<li>titleContains: title含有某个字符串</li>
<li>visibilityOf: 某个元素显示</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EC = protractor.ExpectedConditions;</div><div class="line"><span class="keyword">var</span> button = $(<span class="string">'#xyz'</span>);</div><div class="line"><span class="keyword">var</span> isClickable = EC.elementToBeClickable(button);</div><div class="line"></div><div class="line">browser.get(URL);</div><div class="line">browser.wait(isClickable, <span class="number">5000</span>); <span class="comment">//wait for an element to become clickable</span></div><div class="line">button.click();</div></pre></td></tr></table></figure>
<h3 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">it (<span class="string">'test login error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       _driver.get(<span class="string">'http://subway.simba.taobao.com/#!/login'</span>);</div><div class="line">       _driver.wait(protractor.until.elementLocated(by.css(<span class="string">'.login-ifr'</span>)),<span class="number">1000</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</div><div class="line">           _driver.switchTo().frame(elem);</div><div class="line">           _driver.findElement(by.name(<span class="string">'TPL_username'</span>)).sendKeys(<span class="string">'zhangmeng1986712'</span>);</div><div class="line">           _driver.findElement(by.name(<span class="string">'TPL_password'</span>)).sendKeys(<span class="string">'xxxxx'</span>);</div><div class="line">           _driver.findElement(by.id(<span class="string">'J_SubmitStatic'</span>)).click();</div><div class="line">           _driver.sleep(<span class="number">1000</span>);</div><div class="line">           browser.driver.findElement(by.css(<span class="string">'.error'</span>)).then(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>) </span>&#123;</div><div class="line">               <span class="keyword">return</span> elem.getInnerHtml().then(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">                   expect(text).toMatch(<span class="string">'密码和账户名不匹配'</span>);</div><div class="line">               &#125;);</div><div class="line">           &#125;);</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h2 id="page-object-pattern"><a href="#page-object-pattern" class="headerlink" title="page object pattern"></a>page object pattern</h2><p>page object的模式大家一定不陌生,通过合理的配置可以使测试代码更容易维护,举例来说可以这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//书写一个input操作类</div><div class="line">var AngularHomepage = function() &#123;</div><div class="line">  var nameInput = element(by.model(&apos;yourName&apos;));</div><div class="line">  var greeting = element(by.binding(&apos;yourName&apos;));</div><div class="line"></div><div class="line">  this.get = function() &#123;</div><div class="line">    browser.get(&apos;http://www.angularjs.org&apos;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  this.setName = function(name) &#123;</div><div class="line">    nameInput.sendKeys(name);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  this.getGreeting = function() &#123;</div><div class="line">    return greeting.getText();</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line">//测试代码</div><div class="line">describe(&apos;angularjs homepage&apos;, function() &#123;</div><div class="line">  it(&apos;should greet the named user&apos;, function() &#123;</div><div class="line">    var angularHomepage = new AngularHomepage();</div><div class="line">    angularHomepage.get();</div><div class="line">    angularHomepage.setName(&apos;Julie&apos;);</div><div class="line">    expect(angularHomepage.getGreeting()).toEqual(&apos;Hello Julie!&apos;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="mobile端的测试"><a href="#mobile端的测试" class="headerlink" title="mobile端的测试"></a>mobile端的测试</h2><p>详情<a href="https://angular.github.io/protractor/#/mobile-setup" target="_blank">参考</a><br>这个例子是使用Appium作为server端进行测试的,由于selenium-webdriver不能直接联Appium, 所以需要使用wd-bridge进行折衷.</p>
<h2 id="e2e测试程序设计准则"><a href="#e2e测试程序设计准则" class="headerlink" title="e2e测试程序设计准则"></a>e2e测试程序设计准则</h2><p><a href="https://angular.github.io/protractor/#/style-guide" target="_blank">参考</a></p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>本文的参考代码见 <a href="https://github.com/zhangmeng712/f2e-testing/tree/master/protractor" target="_blank">Github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://angular.github.io/protractor/#/&quot; target=&quot;_blank&quot;&gt;protractor&lt;/a&gt;用于前端UI自动化测试,特别为angular程序定制&lt;/p&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; c
    
    </summary>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/categories/nodejs/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/nodejs/testing/"/>
    
    
      <category term="nodejs" scheme="https://mengbaby.github.io/Mtags/nodejs/"/>
    
      <category term="angular" scheme="https://mengbaby.github.io/Mtags/angular/"/>
    
      <category term="e2e" scheme="https://mengbaby.github.io/Mtags/e2e/"/>
    
      <category term="protractor" scheme="https://mengbaby.github.io/Mtags/protractor/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试之单元测试（二）—— react组件的测试工具jest</title>
    <link href="https://mengbaby.github.io/2016/02/10/673/"/>
    <id>https://mengbaby.github.io/2016/02/10/673/</id>
    <published>2016-02-09T22:47:02.000Z</published>
    <updated>2017-04-17T07:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了<a href="http://dj1211.com/?p=650" target="_blank" rel="external">Polymer</a>的测试框架web-components-tester, 今天来看看React团队出品的Jest.在此,特别感谢婆婆帮忙带宝宝才让我有时间继续书写文章.</p>
<p>前面介绍了<a target="_blank" href="http://dj1211.com/?p=650">Polymer</a>的测试框架web-components-tester, 今天来看看React团队出品的Jest.在此,特别感谢婆婆帮忙带宝宝才让我有时间继续书写文章.</p>
<h2 id="Jest的功能"><a href="#Jest的功能" class="headerlink" title="Jest的功能"></a>Jest的功能</h2><ul>
<li>内置jasmine</li>
<li>内置mock函数 可以mock模块</li>
<li>基于jsdom</li>
<li>同步化书写异步代码</li>
<li>真心赞一下简洁明了的API定义和用法 以及清晰的文档,确实让书写单元测试不再痛苦</li>
<li>适用于commonJS模块的单元测试</li>
<li>运行速度较慢</li>
</ul>
<h2 id="Jest用法"><a href="#Jest用法" class="headerlink" title="Jest用法"></a>Jest用法</h2><ul>
<li>安装: npm install jest-cli(需要node版本大于4)</li>
<li>配置 package.json 如下</li>
<li>运行: npm test</li>
<li>调试(使用node-debug再浏览器中调试)：node-debug –nodejs –harmony ./node_modules/jest-cli/bin/jest.js –runInBand <strong>tests</strong>/getUser-test.js</li>
<li>运行单个文件 ./node_modules/jest-cli/bin/jest.js <strong>tests</strong>/getUser-test.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"jest-test-examples"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"jest"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面就具体介绍一下使用jest进行测试的方法,采用的例子为jest的<a href="https://facebook.github.io/jest/docs/getting-started.html#content" target="_blank">官方实例</a></p>
<h2 id="一个简单的测试"><a href="#一个简单的测试" class="headerlink" title="一个简单的测试"></a>一个简单的测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jest.dontMock(<span class="string">'../src/sum'</span>);</div><div class="line">describe(<span class="string">'sum'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">'adds 1 + 2 to equal 3'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'../src/sum'</span>);</div><div class="line">        expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>describe和it还有expect都使用了jasmine的语法, jest会自动mock所有的依赖模块,对模块中所有的输出方法予以遍历并进行mock,对于要测试的模块使用jest.dontMock标识,jest就不会去mock.</p>
<h2 id="异步的单元测试实例"><a href="#异步的单元测试实例" class="headerlink" title="异步的单元测试实例"></a>异步的单元测试实例</h2><p>异步是javascript的灵魂, 所以异步的测试也是极其重要的,下面看看jest关于异步程序的测试,假如有这样个ajax程序,获取数据并进行解析,对其进行测试</p>
<ul>
<li>1 ajax的数据获取是否正确</li>
<li>2 parseUserJson是否正确<br>在第二个测试用例中使用了genMockFunction,用来对回调函数进行mock,在jest中有两种方式进行函数的mock<ul>
<li>1 使用xFunc = require(‘xx’);</li>
<li>2 使用xFunc = jest.genMockFunction();<br>使用后,会在xFunc.calls中存储有关函数的调用信息,例如</li>
<li>//mock.calls.length 记录了函数被调用了几次</li>
<li>//mock.calls[0][0]  被调用函数的第一个参数</li>
<li>//mock.calls[0][1]  第二个参数<br>代码如下: $.ajax是一个被mock的函数,callback也被mock,getUser(callback)调用后,可以通过检测传递的参数判断是否正确.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseUserJson</span>(<span class="params">userJson</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">loggedIn</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">fullName</span>: userJson.firstName + <span class="string">' '</span> + userJson.lastName</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchCurrentUser</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $.ajax(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">        <span class="attr">url</span>: <span class="string">'http://example.com/currentUser'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">userJson</span>) </span>&#123;</div><div class="line">            callback(parseUserJson(userJson));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = fetchCurrentUser;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">jest.dontMock(<span class="string">'../src/getUser'</span>);</div><div class="line">describe(<span class="string">'getUser'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//test right params</span></div><div class="line">    it(<span class="string">'calls into $.ajax with the correct params'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">        <span class="keyword">var</span> getUser = <span class="built_in">require</span>(<span class="string">'../src/getUser'</span>);</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dummyCallback</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">        getUser(dummyCallback);</div><div class="line">        <span class="comment">// Now make sure that $.ajax was properly called during the previous</span></div><div class="line">        <span class="comment">// 2 lines</span></div><div class="line">        expect($.ajax).toBeCalledWith(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">            <span class="attr">url</span>: <span class="string">'http://example.com/currentUser'</span>,</div><div class="line">            <span class="attr">success</span>: jasmine.any(<span class="built_in">Function</span>)</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//test callback function</span></div><div class="line">    it(<span class="string">'calls the callback when $.ajax requests are finished'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">        <span class="keyword">var</span> getUser = <span class="built_in">require</span>(<span class="string">'../src/getUser'</span>);</div><div class="line"></div><div class="line">        <span class="comment">//create mock function</span></div><div class="line">        <span class="keyword">var</span> callback = jest.genMockFunction();</div><div class="line">        getUser(callback);</div><div class="line"></div><div class="line">        <span class="comment">//xfunc.mock have interactions information</span></div><div class="line">        <span class="comment">//mock.calls.length call times</span></div><div class="line">        <span class="comment">//mock.calls[0][0] first param</span></div><div class="line">        <span class="comment">//mock.calls[0][1] second param</span></div><div class="line">        <span class="comment">//https://facebook.github.io/jest/docs/mock-functions.html</span></div><div class="line"></div><div class="line">        <span class="comment">//emulate the params pass to success</span></div><div class="line">        $.ajax.mock.calls[<span class="number">0</span>][<span class="number">0</span>].success(&#123;</div><div class="line">            <span class="attr">firstName</span>: <span class="string">'Bobby'</span>,</div><div class="line">            <span class="attr">lastName</span>: <span class="string">'");DROP TABLE Users;--'</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        expect(callback.mock.calls[<span class="number">0</span>][<span class="number">0</span>]).toEqual(&#123;</div><div class="line">            <span class="attr">loggedIn</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">fullName</span>: <span class="string">'Bobby ");DROP TABLE Users;--'</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="React组件的单元测试实例"><a href="#React组件的单元测试实例" class="headerlink" title="React组件的单元测试实例"></a>React组件的单元测试实例</h2><p>假如我们有这样一个checkbox react组件, 如下, react的es6写法请参考我的blog-<a href="http://dj1211.com/?p=667" target="_blank">ES6的核心语法与应用</a><br>原理非常简单,点击checkbox切换label的状态.我们的测试代码如下, 使用了<a href="https://facebook.github.io/react/docs/test-utils.html" target="_blank">react-addons-test-utils</a>这个模块, 模块的renderIntoDocument用于将react组件渲染到document中,<br>并且支持产生模拟事件:TestUtils.Simulate.change.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checkbox</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">isChecked</span>: <span class="literal">false</span>&#125;;</div><div class="line">        <span class="keyword">this</span>.changeState = <span class="keyword">this</span>.changeState.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    changeState () &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">isChecked</span>: !<span class="keyword">this</span>.state.isChecked&#125;)</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeState&#125;</span> /&gt;</span></div><div class="line">                &#123;this.state.isChecked ? this.props.labelOn : this.props.labelOff&#125;</div><div class="line">               <span class="tag">&lt;/<span class="name">label</span>&gt;</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">export default Checkbox;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> TestUtils <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</div><div class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span>  <span class="string">'react-dom'</span>;</div><div class="line">jest.dontMock(<span class="string">'../src/checkbox'</span>);</div><div class="line"><span class="keyword">const</span> Checkbox = <span class="built_in">require</span>(<span class="string">'../src/checkbox'</span>);</div><div class="line"></div><div class="line">describe(<span class="string">'test react checkbox component'</span>, () =&gt; &#123;</div><div class="line">    it(<span class="string">'change the label after click'</span>, () =&gt; &#123;</div><div class="line">        <span class="comment">//1 render component</span></div><div class="line">        <span class="comment">//2 get node label get default value off</span></div><div class="line">        <span class="comment">//3 simulate click</span></div><div class="line">        <span class="comment">//4 expect value equal on</span></div><div class="line"></div><div class="line">        <span class="comment">//TestUtils.renderIntoDocument method refers to https://facebook.github.io/react/docs/test-utils.html#renderintodocument</span></div><div class="line">        <span class="comment">//TestUtils.findRenderedDOMComponentWithTag https://facebook.github.io/react/docs/test-utils.html#findrendereddomcomponentwithtag</span></div><div class="line">        <span class="comment">//ReactDom API:findDOMNode render unmountComponentAtNode server-side:renderToString renderToStaticMarkup</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> checkbox = TestUtils.renderIntoDocument(<span class="xml"><span class="tag">&lt;<span class="name">Checkbox</span> <span class="attr">labelOn</span>=<span class="string">"On"</span> <span class="attr">labelOff</span>=<span class="string">"Off"</span> /&gt;</span>);</span></div><div class="line">        var checkboxNode = ReactDom.findDOMNode(checkbox);</div><div class="line">        //https://facebook.github.io/jest/docs/api.html#expect-value</div><div class="line">        expect(checkboxNode.textContent).toEqual('Off');</div><div class="line">        TestUtils.Simulate.change(TestUtils.findRenderedDOMComponentWithTag(checkbox, 'input'));</div><div class="line">        expect(checkboxNode.textContent).toEqual('On');</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行的时候我们需要通过babel预处理一下,通过如下的方式配置package.json即可运行:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"test"</span>: <span class="string">"jest"</span></div><div class="line">&#125;,</div><div class="line"><span class="string">"jest"</span>: &#123;</div><div class="line">  <span class="string">"scriptPreprocessor"</span>: <span class="string">"&lt;rootDir&gt;/node_modules/babel-jest"</span>,</div><div class="line">  <span class="string">"unmockedModulePathPatterns"</span>: [</div><div class="line">    <span class="string">"&lt;rootDir&gt;/node_modules/react"</span>,</div><div class="line">    <span class="string">"&lt;rootDir&gt;/node_modules/react-dom"</span>,</div><div class="line">    <span class="string">"&lt;rootDir&gt;/node_modules/react-addons-test-utils"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"modulePathIgnorePatterns"</span>: [</div><div class="line">    <span class="string">"&lt;rootDir&gt;/node_modules/"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="手动mock"><a href="#手动mock" class="headerlink" title="手动mock"></a>手动mock</h2><p>经常我们需要模拟某个模块中的方法(此方法实现非常复杂依赖第三方的模块)用来测试另一个模块的输入输出是否正确,jest就提供非常方便的mock机制,例如,我们在A模块中依赖jquery的fx方法<br>而fx方法又依赖于其他方法, 因为我们只关心fx的输出,所以我们就可以直接用来模拟,方法如下:</p>
<ul>
<li>建立<strong>mocks</strong>文件夹</li>
<li>新建jquery模块:jquery.js</li>
<li>使用genMockFromModule和mockImplementation API 如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mock the module of real jquery</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> jqueryMocks = jest.genMockFromModule(<span class="string">'jquery'</span>);</div><div class="line"><span class="keyword">var</span> mock_fx = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'mockValue'</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//using mock_fx to mock the function of real fx</span></div><div class="line">jqueryMocks.fx.mockImplementation(mock_fx);</div><div class="line"><span class="built_in">module</span>.exports = jqueryMocks;</div></pre></td></tr></table></figure>
<p>这样就可以在测试代码中直接引用已经模拟好的fx函数进行测试了,直接对模块的输入控制,减少了依赖,实现测试的”解耦”.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'jest mocks'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   it(<span class="string">'jquery mock getEnv value'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> value = <span class="built_in">require</span>(<span class="string">'jquery'</span>).fx();</div><div class="line">       expect(value).toEqual(<span class="string">'mockValue'</span>)</div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h2><p><a href="https://github.com/zhangmeng712/f2e-testing/tree/master/un-tests/tests/react/basic" target="_blank">源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了&lt;a href=&quot;http://dj1211.com/?p=650&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Polymer&lt;/a&gt;的测试框架web-components-tester, 今天来看看React团队出品的Jest.在此,特别感谢
    
    </summary>
    
      <category term="Uncategorized" scheme="https://mengbaby.github.io/categories/Uncategorized/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/Mtags/nodejs/"/>
    
      <category term="React" scheme="https://mengbaby.github.io/Mtags/React/"/>
    
      <category term="jest" scheme="https://mengbaby.github.io/Mtags/jest/"/>
    
      <category term="前端单元测试" scheme="https://mengbaby.github.io/Mtags/%E5%89%8D%E7%AB%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6的核心语法与应用</title>
    <link href="https://mengbaby.github.io/2016/01/24/667/"/>
    <id>https://mengbaby.github.io/2016/01/24/667/</id>
    <published>2016-01-24T06:28:03.000Z</published>
    <updated>2017-04-17T07:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都对ES6嗤之以鼻，本来灵活简单的Javascrit，非得为了提升B格，增加学习的成本，搞那么多鸡肋的语法。但是无奈俺们这些“老年jser”都被历史的车轮碾压了，现在如果不掌握ES6，估计很多代码都看不懂了。没有闲暇的午后时间来系统的学习ES6（其实还是有点抵触心理），但是为了跟上“年轻人”的步伐，随着用随着看随着学吧。力求以最简单的语言讲述。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><p>语法为：</p>
<ul>
<li>export function x () {}</li>
<li>export class</li>
<li>export default {}</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// kittydar.js - 找到一幅图像中所有猫的位置</span></div><div class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">detectCats</span>(<span class="params">canvas, options</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> kittydar = <span class="keyword">new</span> Kittydar(options);</div><div class="line">      <span class="keyword">return</span> kittydar.detectCats(canvas);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Kittydar</span> </span>&#123;</div><div class="line">      ... 处理图片的几种方法 ...</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这个helper函数没有被export。</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resizeCanvas</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//默认的</span></div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    	<span class="attr">xx</span>: <span class="string">'111'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="引用模块"><a href="#引用模块" class="headerlink" title="引用模块"></a>引用模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123;detectCats&#125; <span class="keyword">from</span> <span class="string">"kittydar.js"</span>; <span class="comment">//引入某个方法</span></div><div class="line"> <span class="keyword">import</span> &#123;detectCats, Kittydar&#125; <span class="keyword">from</span> <span class="string">"kittydar.js"</span>; <span class="comment">//引入并重命名</span></div><div class="line"> <span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;<span class="comment">//引入全部全部</span></div><div class="line"> <span class="keyword">import</span> helloWorld <span class="keyword">from</span> <span class="string">'./hello-world'</span>; <span class="comment">//引入默认</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"catpix"</span>);</div><div class="line">        <span class="keyword">var</span> cats = detectCats(canvas);</div><div class="line">        drawRectangles(canvas, cats);</div><div class="line">    &#125;</div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line">## class用法</div><div class="line"></div><div class="line">- 基本语法 class A &#123;&#125;</div><div class="line">- 构造器 constructor &#123;&#125;</div><div class="line">- 继承 class A extends AParent &#123;&#125;</div><div class="line">- super()</div><div class="line">- 注意：类声明与函数声明不同，它不会被提升,所以先new 后class定义 会抛出异常</div><div class="line">- 静态变量：static compare(a, b) &#123;&#125;</div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="comment">//使用Object.defineProperty实现可读属性make year</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span>(<span class="params">make, year</span>) </span>&#123;</div><div class="line">  <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'make'</span>, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> make; &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'year'</span>, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> year; &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Vehicle.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.make + <span class="string">' '</span> + <span class="keyword">this</span>.year;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vehicle = <span class="keyword">new</span> Vehicle(<span class="string">'Toyota Corolla'</span>, <span class="number">2009</span>);</div><div class="line"><span class="built_in">console</span>.log(vehicle.make); <span class="comment">// Toyota Corolla</span></div><div class="line">vehicle.make = <span class="string">'Ford Mustang'</span>; <span class="comment">//静态属性</span></div><div class="line"><span class="built_in">console</span>.log(vehicle.toString()) <span class="comment">// Toyota Corolla 2009</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(make, year) &#123;</div><div class="line">    <span class="keyword">this</span>._make = make;</div><div class="line">    <span class="keyword">this</span>._year = year;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get make() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._make;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get year() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'xxx'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vehicle = <span class="keyword">new</span> Vehicle(<span class="string">'Toyota Corolla'</span>, <span class="number">2009</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(vehicle.make); <span class="comment">// Toyota Corolla</span></div><div class="line">vehicle.make = <span class="string">'Ford Mustang'</span>;</div><div class="line"><span class="built_in">console</span>.log(vehicle.toString()) <span class="comment">// Toyota Corolla 2009</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5的继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Motorcycle</span>(<span class="params">make, year</span>) </span>&#123;</div><div class="line">  Vehicle.apply(<span class="keyword">this</span>, [make, year]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Motorcycle.prototype = <span class="built_in">Object</span>.create(Vehicle.prototype, &#123;</div><div class="line">  <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'xxx'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Motorcycle.prototype.constructor = Motorcycle;</div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Motorcycle</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(make, year) &#123;</div><div class="line">    <span class="keyword">super</span>(make, year);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'xxxx'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>箭头函数的产生，主要由两个目的：更简洁的语法和与父作用域共享关键字this。</li>
<li>function和{}都消失了，所有的回调函数都只出现在了一行里。</li>
<li>当只有一个参数时，()也消失了（rest参数是一个例外，如(…args) =&gt; …）。</li>
<li>当{}消失后，return关键字也跟着消失了。单行的箭头函数会提供一个隐式的return（这样的函数在其他编程语言中常被成为lamda函数）。</li>
<li>箭头函数没有它自己的this值，箭头函数内的this值继承自外围作用域。</li>
<li>箭头函数与普通函数还有一个区别就是，它没有自己的arguments变量，但可通过<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank">rest参数</a>获得。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">() =&gt; &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">() =&gt; <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;</div><div class="line">(a) =&gt; &#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;</div><div class="line">(a) =&gt; a * <span class="number">2</span></div><div class="line">a =&gt; a * <span class="number">2</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a * b; &#125;</div><div class="line">(a, b) =&gt; &#123; <span class="keyword">return</span> a * b; &#125;</div><div class="line">(a, b) =&gt; a * b</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>]; &#125;</div><div class="line">(...args) =&gt; args[<span class="number">0</span>]</div><div class="line"> </div><div class="line">() =&gt; &#123;&#125; <span class="comment">// undefined</span></div><div class="line">() =&gt; (&#123;&#125;) <span class="comment">// &#123;&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在之前的js中setInterval会把this指向window，</span></div><div class="line"><span class="comment">//使用箭头函数this使用外层的作用域所以不用保存this指针</span></div><div class="line">$(<span class="string">'.current-time'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> $(<span class="keyword">this</span>).text(<span class="built_in">Date</span>.now()), <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//箭头函数的arguments，通过rest函数可以获得</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> print = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(args[<span class="number">0</span>]);</div><div class="line">  print(<span class="string">`LOG: <span class="subst">$&#123;msg&#125;</span>`</span>);</div><div class="line">&#125; </div><div class="line">log(<span class="string">'hello'</span>); <span class="comment">// LOG: hello</span></div></pre></td></tr></table></figure>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>javascript本身是没有块级作用域的，ES6新增的let语法替代var实现了块级作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="comment">// i ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里也可以访问到i</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="comment">// i ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里访问不到i</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="React-on-ES6"><a href="#React-on-ES6" class="headerlink" title="React on ES6"></a>React on ES6</h2><p>详情参考 <a href="http://babeljs.io/blog/2015/06/07/react-on-es6-plus/" target="_blank">这篇文章</a></p>
<h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The ES5 way</span></div><div class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</div><div class="line">  <span class="attr">handleDoubleTap</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; … &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; … &#125;,</div><div class="line">&#125;);</div><div class="line"><span class="comment">// The ES6+ way</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  handleDoubleTap(e) &#123; … &#125;</div><div class="line">  render() &#123; … &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="componentWillMount关键字"><a href="#componentWillMount关键字" class="headerlink" title="componentWillMount关键字"></a>componentWillMount关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The ES5 way</span></div><div class="line"><span class="keyword">var</span> EmbedModal = React.createClass(&#123;</div><div class="line">  <span class="attr">componentWillMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; … &#125;,</div><div class="line">&#125;);</div><div class="line"><span class="comment">// The ES6+ way</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmbedModal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="comment">//实现componentWillMount内容的地方像dom操作</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="state和props初始化"><a href="#state和props初始化" class="headerlink" title="state和props初始化"></a>state和props初始化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The ES5 way</span></div><div class="line"><span class="keyword">var</span> Video = React.createClass(&#123;</div><div class="line">  <span class="attr">getDefaultProps</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">autoPlay</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">maxLoops</span>: <span class="number">10</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">loopsRemaining</span>: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">propTypes</span>: &#123;</div><div class="line">    <span class="attr">autoPlay</span>: React.PropTypes.bool.isRequired,</div><div class="line">    <span class="attr">maxLoops</span>: React.PropTypes.number.isRequired,</div><div class="line">    <span class="attr">posterFrameSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">    <span class="attr">videoSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// The ES6+ way</span></div><div class="line"><span class="comment">// static 实现只读的props</span></div><div class="line"><span class="comment">// 全局state</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">autoPlay</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">maxLoops</span>: <span class="number">10</span>,</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">autoPlay</span>: React.PropTypes.bool.isRequired,</div><div class="line">    <span class="attr">maxLoops</span>: React.PropTypes.number.isRequired,</div><div class="line">    <span class="attr">posterFrameSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">    <span class="attr">videoSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">  &#125;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">loopsRemaining</span>: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="react中的事件"><a href="#react中的事件" class="headerlink" title="react中的事件"></a>react中的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="comment">// Manually bind this method to the component instance...</span></div><div class="line">    <span class="keyword">this</span>.handleOptionsButtonClick = <span class="keyword">this</span>.handleOptionsButtonClick.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  handleOptionsButtonClick(e) &#123;</div><div class="line">    <span class="comment">// this应指向实例</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//箭头函数this指向外层的组件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  handleOptionsButtonClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用ES6改写的React组件程序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checkbox</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">isChecked</span>: <span class="literal">false</span>&#125;;</div><div class="line">        <span class="keyword">this</span>.changeState = <span class="keyword">this</span>.changeState.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    changeState () &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">isChecked</span>: !<span class="keyword">this</span>.state.isChecked&#125;)</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (&lt;label&gt;</div><div class="line">            &lt;input type="checkbox" checked=&#123;this.state.isChecked&#125; onChange=&#123;this.changeState&#125; /&gt;</div><div class="line">            &#123;this.state.isChecked ? this.props.labelOn : this.props.labelOff&#125;</div><div class="line">        &lt;/label&gt;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">export default Checkbox;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都对ES6嗤之以鼻，本来灵活简单的Javascrit，非得为了提升B格，增加学习的成本，搞那么多鸡肋的语法。但是无奈俺们这些“老年jser”都被历史的车轮碾压了，现在如果不掌握ES6，估计很多代码都看不懂了。没有闲暇的午后时间来系统的学习ES6（其实还是有点抵触心理
    
    </summary>
    
      <category term="javascript" scheme="https://mengbaby.github.io/categories/javascript/"/>
    
      <category term="es6" scheme="https://mengbaby.github.io/categories/javascript/es6/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="ES6" scheme="https://mengbaby.github.io/Mtags/ES6/"/>
    
      <category term="React" scheme="https://mengbaby.github.io/Mtags/React/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试之单元测试（一）—— polymer组件的测试工具</title>
    <link href="https://mengbaby.github.io/2015/12/31/650/"/>
    <id>https://mengbaby.github.io/2015/12/31/650/</id>
    <published>2015-12-30T20:04:54.000Z</published>
    <updated>2017-04-17T05:55:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单元测试的工具们"><a href="#单元测试的工具们" class="headerlink" title="单元测试的工具们"></a>单元测试的工具们</h2><ul>
<li><p>单元测试框架</p>
<pre><code>*   Qunit - jquery的单测工具
</code></pre><ul>
<li>jasmine - 早期的测试框架</li>
<li>mocha - 常用框架 支持BDD和TDD</li>
<li>Cucumber - 语义化更好的测试工具</li>
</ul>
</li>
<li><p>断言</p>
<pre><code>*   chai
</code></pre></li>
<li><p>集成</p>
<pre><code>*   Karma
</code></pre><ul>
<li>jenkins</li>
<li>travis-ci</li>
</ul>
</li>
<li><p>mock</p>
<pre><code>*   sinon
</code></pre><ul>
<li>supertest</li>
</ul>
</li>
<li><p>组件测试框架</p>
<pre><code>*   polymer的单测工具：web-component-tester
</code></pre><ul>
<li>react的单测工具：Jest</li>
</ul>
</li>
</ul>
<p>之前的博客对比较基础的测试工具都有所介绍，参考前端自动化测试基础篇，在这篇blog中，我们首先了解一下polymer组件的单元测试工具。</p>
<ul>
<li><a href="http://dj1211.com/?p=581" target="_blank" rel="external">mocha</a></li>
<li><a href="http://dj1211.com/?p=613" target="_blank" rel="external">chai</a></li>
<li><a href="http://dj1211.com/?p=640" target="_blank" rel="external">sinon</a></li>
</ul>
<h2 id="why-web-component-tester"><a href="#why-web-component-tester" class="headerlink" title="why web-component-tester"></a>why web-component-tester</h2><p><a href="https://github.com/Polymer/web-component-tester" target="_blank" rel="external">web-component-tester</a>是polymer组件用于单元测试的框架,主要是用作对于html文件的测试</p>
<ul>
<li>它内部集成了mocha、sinon、sinon-chai、chai，方便使用</li>
<li>使用lodash作为工具函数</li>
<li>async用作异步函数的测试</li>
<li>test-fixture作为<template>模板的测试</template></li>
<li>accessibility-developer-tools将测试结果输出到命令行中。</li>
<li>在server端wct内置selenium-standalone，在客户端使用wd.js操作服务器进行测试</li>
</ul>
<h2 id="API方法"><a href="#API方法" class="headerlink" title="API方法"></a>API方法</h2><h3 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h3><ul>
<li>WCT.loadSuites可以将</li>
<li>suite类似describe将测试进行归类</li>
<li>test类似it进行具体的测试</li>
<li><p>assert用于进行断言，断言同chai的assert的断言规则</p>
<p>suite(‘AwesomeLib’, function() {<br>  test(‘is awesome’, function() {</p>
<pre><code>assert.isTrue(AwesomeLib.awesome);//TDD模式
</code></pre><p>  });<br>});<br>`</p>
<h3 id="特殊的方法"><a href="#特殊的方法" class="headerlink" title="特殊的方法"></a>特殊的方法</h3></li>
<li><p>text-fixture 用来在测试过程中操作template中的dom元素，用法是在<template>外部用<test-fixture>包裹起来。然后就可以通过<br>fixture获取元素，按照dom进行操作。</test-fixture></template></p>
<pre>`&lt;test-fixture id="simple"&gt;
  &lt;template&gt;
    &lt;div&gt;&lt;/div&gt;
  &lt;/template&gt;
&lt;/test-fixture&gt;
&lt;script&gt;
  suite('classList', function() {
    var div;
    setup(function() {
      div = fixture('simple');
    })
    test('foo', function() {
      div.classList.add('foo');
      assertSomethingOrOther(div);
    });
  });
&lt;/script&gt;
`</pre>

<h3 id="关于template-binding异步的测试"><a href="#关于template-binding异步的测试" class="headerlink" title="关于template binding异步的测试"></a>关于template binding异步的测试</h3><p>异步测试在javascript的世界中可谓最常见，对于polymer组件来说，数据驱动模板刷新很重要，<br>模板数据的刷新会调用Polymer.dom.flush, 它是个异步的过程，对此 web-components-tester 专门提供<br>flush函数处理此类异步。</p>
<pre>`suite('with two selected items', function() {
  // Clean up after ourselves.
  teardown(function(done) {
    s.clearSelection();
    s.multi = false;
    // Wait for observers to resolve before moving on to more tests.
    flush(done);
  });

  test('multi selects by index', function(done) {
    s.multi = true;
    //数据变化
    s.selected = [0, 2];
    flush(function() {
      //模板刷新
      assert.equal(s.selectedIndex, [0, 2]);
      assert(s.children[0].classList.contains('core-selected'));
      assert(!s.children[1].classList.contains('core-selected'));
      assert(s.children[2].classList.contains('core-selected'));
      done();
    });
  });

});
`</pre>

<h2 id="google-map-component测试实例"><a href="#google-map-component测试实例" class="headerlink" title="google map component测试实例"></a>google map component测试实例</h2></li>
<li><p>代码参考，<a href="https://github.com/zhangmeng712/f2e-testing/tree/master/un-tests/tests/polymer/test" target="_blank" rel="external">f2e test</a></p>
</li>
<li>1、安装 web-components-tester： npm install -g web-component-tester</li>
<li><p>2 建立test文件夹（默认地址）</p>
<pre><code>*   2.1 index.html
</code></pre><ul>
<li>2.2 google-map-marker.html</li>
<li>2.3 marker.js</li>
</ul>
<pre>`
suite('markers default', function () {
    var map;
    setup(function () {
        map = document.querySelector('#map');
    });

    test('markers are initialized', function () {
        var markerEl = Polymer.dom(map).querySelector('google-map-marker');
        assert.isUndefined(markerEl.marker);
        assert.isUndefined(markerEl.map);
        assert.isNull(markerEl.info);
        assert.equal(markerEl.latitude, 37.779);
        assert.equal(markerEl.longitude, -122.3892);
    });

    test('markers are added to map', function () {
        map.addEventListener('google-map-ready', function () {
            var mapMarkerEl = Polymer.dom(map).querySelector('google-map-marker');
            var firstMarker = map.markers[0];
            expect(firstMarker).to.deep.equal(mapMarkerEl);
            assert.equal(map.markers.length, 3);
        });
    });

    test('markers position can be updated', function (done) {
        map.addEventListener('google-map-ready', function (e) {
            var markerEl = Polymer.dom(map).querySelector('google-map-marker');
            markerEl.latitude = 37.79493;
            markerEl.longitude = -122.41942;
            markerEl.zIndex = 1;
            assert.equal(markerEl.map, map.map, "marker's map is not the google-map's");
            //重新渲染 异步过程
            Polymer.dom.flush();
            async.nextTick(function () {
                var marker = markerEl.marker;
                assert.equal(marker.getPosition().lat(), markerEl.latitude);
                assert.equal(marker.getPosition().lng(), markerEl.longitude);
                assert.equal(marker.getZIndex(), markerEl.zIndex);
                done();
            });
        });
    });
});
`</pre>
</li>
<li><p>3 运行测试脚本 wct 即可。<br><img src="https://img.alicdn.com/tps/TB1lCyvLpXXXXcwXpXXXXXXXXXX-1335-558.jpg" alt=""><br><img src="https://img.alicdn.com/tps/TB1iSqbLpXXXXa0aXXXXXXXXXXX-991-247.jpg" alt=""></p>
<h2 id="wct运行机制"><a href="#wct运行机制" class="headerlink" title="wct运行机制"></a>wct运行机制</h2><p>代码：<a href="https://github.com/Polymer/web-component-tester/tree/master/runner" target="_blank" rel="external">runner</a></p>
<ul>
<li>建立webserver，模板参见<a href="https://github.com/Polymer/web-component-tester/blob/master/data/index.html" target="_blank" rel="external">index.html</a></li>
<li>读取wct.conf.json配置</li>
<li>内置selenium server 通过wd.js建立连接打开浏览器进行测试</li>
<li>并将结果通过socketIO返回显示在命令行</li>
<li>测试框架核心：browser.js， <a href="https://github.com/Polymer/web-component-tester/tree/master/browser" target="_blank" rel="external">源码</a>内置chai mocha sinon socket等以及polymer测试的辅助函数</li>
</ul>
<h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><p>在测试中少不了点击事件的模拟，wct这个工具不具有这个功能，但是可以使用polymer的工具组件<a href="https://github.com/PolymerElements/iron-test-helpers" target="_blank" rel="external">iron-test-helpers</a><br>它内置了MockInteraction可以实现各个事件的模拟，只需import iron-test-helpers.html 即可。使用方法如下：</p>
<p><pre>`test(‘can be triggered with space’, function(done) {<br>  button.addEventListener(‘keydown’, function() {</pre></p>
<pre><code>done();
</code></pre><p>  });<br>  MockInteractions.pressSpace(button);<br>});</p>
<p>test(‘can be clicked’, function(done) {<br>  button.addEventListener(‘click’, function() {</p>
<pre><code>done();
</code></pre><p>  });<br>  MockInteractions.tap(button);<br>});</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单元测试的工具们&quot;&gt;&lt;a href=&quot;#单元测试的工具们&quot; class=&quot;headerlink&quot; title=&quot;单元测试的工具们&quot;&gt;&lt;/a&gt;单元测试的工具们&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单元测试框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Qunit - jqu
    
    </summary>
    
      <category term="Uncategorized" scheme="https://mengbaby.github.io/categories/Uncategorized/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="前端单元测试" scheme="https://mengbaby.github.io/Mtags/%E5%89%8D%E7%AB%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="polymer" scheme="https://mengbaby.github.io/Mtags/polymer/"/>
    
      <category term="unit test" scheme="https://mengbaby.github.io/Mtags/unit-test/"/>
    
      <category term="web components" scheme="https://mengbaby.github.io/Mtags/web-components/"/>
    
      <category term="web-components-tester" scheme="https://mengbaby.github.io/Mtags/web-components-tester/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试基础-sinon篇章</title>
    <link href="https://mengbaby.github.io/2015/12/26/640/"/>
    <id>https://mengbaby.github.io/2015/12/26/640/</id>
    <published>2015-12-26T05:10:16.000Z</published>
    <updated>2017-04-17T07:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sinon用途"><a href="#sinon用途" class="headerlink" title="sinon用途"></a>sinon用途</h2><ul>
<li>在测试领域 Test double是很重要的一个概念。Test double主要用在自动化测试领域，会使用简单的对象或者流程模拟对应的行为减少测试的复杂性。</li>
<li>用于 JavaScript 的测试监视(spy)、桩(stub)和仿制(mock)功能。不依赖其他类库，兼容任何单元测试框架。</li>
</ul>
<h2 id="sinon-spy（最常用）"><a href="#sinon-spy（最常用）" class="headerlink" title="sinon spy（最常用）"></a>sinon spy（最常用）</h2><ul>
<li>test spy 是这样的一类函数，它可以记录自己被调用的情况，包括传入的参数、返回结果、this 指向和抛出的错误（如果有的话）。test spy 可以是一个匿名函数，也可以是对一个已有函数进行的封装。</li>
<li>用于测试callback函数</li>
<li>用于spy已知行为的方法</li>
<li>创建spy</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个匿名的函数用于记录调用的参数、返回值、以及异常</span></div><div class="line"><span class="keyword">var</span> spy = sinon.spy();</div><div class="line"><span class="keyword">var</span> spy = sinon.spy(myFunc);</div><div class="line"><span class="comment">//对对象的方法增加spy 用于替换原有方法的行为，可以通过调用object.method.restore()实现恢复设置</span></div><div class="line"><span class="keyword">var</span> spy = sinon.spy(object, <span class="string">"method"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>sinon API用法</p>
<ul>
<li>判断某函数调用了某些参数：spy.withArgs(arg1[, arg2, …]); e.g.  assert(spy.withArgs(42).calledOnce);</li>
<li>某函数调用的次数：spy.callCount</li>
<li>spy.called</li>
<li>spy.calledTwice   spy.calledThrice</li>
<li>spy.firstCall spy.secondCall spy.thirdCall</li>
<li>判断是否在另一个spy之前（后）被调用 spy.calledBefore(anotherSpy);spy.calledAfter(anotherSpy);</li>
<li>至少有一次被某个参数调用，参数可以部分匹配：spy.calledWith(arg1, arg2, …);</li>
<li>至少有一次抛出异常：spy.threw();</li>
</ul>
</li>
<li><p>sinon spy实例</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以backbone的Event单测为例</span></div><div class="line"><span class="keyword">var</span> eventer = _.extend(&#123;&#125;, Backbone.Events),</div><div class="line">    spy = sinon.spy();</div><div class="line"></div><div class="line"><span class="comment">// Set up the spy.</span></div><div class="line">eventer.on(<span class="string">"foo"</span>, spy);</div><div class="line">expect(spy.called).to.be.false;</div><div class="line"></div><div class="line"><span class="comment">// Fire event.</span></div><div class="line">eventer.trigger(<span class="string">"foo"</span>, <span class="number">42</span>);</div><div class="line"></div><div class="line"><span class="comment">// Check number of calls.</span></div><div class="line">expect(spy.calledOnce).to.be.true;</div><div class="line">expect(spy.callCount).to.equal(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Check calling arguments.</span></div><div class="line">expect(spy.firstCall.args[<span class="number">0</span>]).to.equal(<span class="number">42</span>);</div><div class="line">expect(spy.calledWith(<span class="number">42</span>)).to.be.true;</div></pre></td></tr></table></figure>
<h2 id="sinon-stub"><a href="#sinon-stub" class="headerlink" title="sinon stub"></a>sinon stub</h2><ul>
<li>stub（桩）其实是最抽象最难理解的，Test stubs是一类预编码行为的函数（也是一种 spy）。除了改变stub对象的行为之外，它还支持所有的 spy API。同spy一样，stubs 可以是匿名函数，或者包装已有函数。当使用 stub 包装一个已有函数时，原函数将不会被调用。</li>
<li>stub用于：<ul>
<li>在测试中控制一个方法的行为，以强制代码沿特定路径执行。例如测试错误处理时，可以强制一个方法抛出错误。</li>
<li>当你希望阻止一个方法被直接调用时（可能是因为这个方法触发了干扰行为，例如 XHR 请求之类的）。</li>
</ul>
</li>
<li><p>创建stub</p>
<ul>
<li>创建一个匿名的 stub 函数。var stub = sinon.stub();</li>
<li>使用一个 stub 函数替代 object.method。原函数可以通过调用 object.method.restore() （或 stub.restore()）方法来还原。如果 object.method 不是一个函数，则会抛出一个异常来帮助你避免类型错误。var stub = sinon.stub(object, “method”);</li>
<li>使用 func 来替换 object.method，并且被包装在一个 spy 中。object.method.restore() 可以恢复原方法。var stub = sinon.stub(object, “method”, func);</li>
<li>stub 该对象的所有方法。var stub = sinon.stub(obj);</li>
</ul>
</li>
<li><p>stub API，<a href="http://sinonjs.org/docs/#stubs" target="_blank" rel="external">详情</a></p>
<ul>
<li>stub.withArgs(arg1[, arg2, …]);</li>
<li>stub.returns(obj);</li>
<li>stub.throws(); 例： var callback = sinon.stub(); callback.withArgs(1).throws(“TypeError”);</li>
<li>stub.yieldsTo(property, [arg1, arg2, …])</li>
</ul>
</li>
<li><p>sinon stub实例</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//basic usage</span></div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">      <span class="attr">multiply</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a * b; &#125;,</div><div class="line">      <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg); &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    it(<span class="string">"stubs multiply"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// Stub with a hard-coded return value.</span></div><div class="line">      sinon.stub(obj, <span class="string">"multiply"</span>).returns(<span class="number">5</span>);</div><div class="line">      expect(obj.multiply(<span class="number">1</span>, <span class="number">2</span>)).to.equal(<span class="number">5</span>);</div><div class="line">      obj.multiply.restore();</div><div class="line"></div><div class="line">      <span class="comment">// Stub with a function.</span></div><div class="line">      sinon.stub(obj, <span class="string">"multiply"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">      &#125;);</div><div class="line">      expect(obj.multiply(<span class="number">1</span>, <span class="number">2</span>)).to.equal(<span class="number">3</span>);</div><div class="line">      obj.multiply.restore();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it(<span class="string">"stubs error"</span>, sinon.test(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.stub(obj, <span class="string">"error"</span>);</div><div class="line">      expect(obj.error).to.not.throw();</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">//use yieldsTo</span></div><div class="line">    it(<span class="string">"stubs with yieldsTo"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> obj = &#123;</div><div class="line">                    <span class="attr">async</span>: <span class="function"><span class="keyword">function</span> (<span class="params">opts</span>) </span>&#123;</div><div class="line">                        opts.success(<span class="string">"a"</span>, <span class="string">"b"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                spyObj = &#123;</div><div class="line">                    <span class="attr">failure</span>: sinon.spy(),</div><div class="line">                    <span class="attr">success</span>: sinon.spy()</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">            sinon.stub(obj, <span class="string">"async"</span>).yieldsTo(<span class="string">"success"</span>, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Call on object with callback spies.</span></div><div class="line">            obj.async(spyObj);</div><div class="line"></div><div class="line">            expect(spyObj.failure).to.have.not.have.been.called;</div><div class="line">            expect(spyObj.success)</div><div class="line">                .to.have.been.calledOnce.and</div><div class="line">                .to.have.been.calledWith(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>##sinon mock</p>
<ul>
<li>用于给出expectation然后验证某个object的method是否是正确的</li>
<li>同spy的区别，mock出的object收到了数据或是调用并没有真正执行，一切针对mock的调用都是假的。所以mock可以用来测试具有side effect的函数，这里的side effect泛指和外部对象有数据交互或者是调用，比如调用外部对象的方法、向server发送数据、和UI对象有交互、写日志等等。</li>
<li><p>API</p>
<ul>
<li>创建mock：var mock = sinon.mock(obj);</li>
<li>给出expectation   mock.expects(“method”);</li>
<li>校验是否正确： mock.verify();</li>
<li>重置：mock.restore();</li>
</ul>
</li>
<li><p>sinon mock 例子</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Sinon.JS mocks"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Object literal with two methods.</span></div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">multiply</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a * b; &#125;,</div><div class="line">    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg); &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  it(<span class="string">"mocks multiply"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Create the mock.</span></div><div class="line">    <span class="keyword">var</span> mock = sinon.mock(obj);</div><div class="line"></div><div class="line">    <span class="comment">// The multiply method is expected to be called:</span></div><div class="line">    mock.expects(<span class="string">"multiply"</span>)</div><div class="line">      .atLeast(<span class="number">2</span>)    <span class="comment">// 2+ times,</span></div><div class="line">      .atMost(<span class="number">4</span>)     <span class="comment">// no more than 4 times, and</span></div><div class="line">      .withArgs(<span class="number">2</span>);  <span class="comment">// 2 was first arg on *all* calls.</span></div><div class="line"></div><div class="line">    <span class="comment">// Make 3 calls to `multiply()`.</span></div><div class="line">    obj.multiply(<span class="number">2</span>, <span class="number">1</span>);</div><div class="line">    obj.multiply(<span class="number">2</span>, <span class="number">2</span>);</div><div class="line">    obj.multiply(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Verify **all** of the previous expectations.</span></div><div class="line">    mock.verify();</div><div class="line"></div><div class="line">    <span class="comment">// Restore the object.</span></div><div class="line">    mock.restore();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="sinon-Fake-XMLHttpRequest-Fake-Server"><a href="#sinon-Fake-XMLHttpRequest-Fake-Server" class="headerlink" title="sinon Fake XMLHttpRequest/ Fake Server"></a>sinon Fake XMLHttpRequest/ Fake Server</h2><ul>
<li>fake server用法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">setUp</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.server = sinon.fakeServer.create();<span class="comment">//创建server</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">tearDown</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.server.restore();</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="string">"test should fetch comments from server"</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.server.respondWith(<span class="string">"GET"</span>, <span class="string">"/some/article/comments.json"</span>,</div><div class="line">            [<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span> &#125;,</div><div class="line">             <span class="string">'[&#123; "id": 12, "comment": "Hey there" &#125;]'</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> callback = sinon.spy();</div><div class="line">        myLib.getCommentsFor(<span class="string">"/some/article"</span>, callback);</div><div class="line">        <span class="keyword">this</span>.server.respond();</div><div class="line"></div><div class="line">        sinon.assert.calledWith(callback, [&#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">comment</span>: <span class="string">"Hey there"</span> &#125;]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>sinon可以用作实现request的模拟，现在更多的使用<a href="https://github.com/visionmedia/supertest" target="_blank">supertest</a><br>用于HTTP的测试</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'GET /user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  it(<span class="string">'user.name should be an case-insensitive match for "tobi"'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</div><div class="line">    request(app)</div><div class="line">      .get(<span class="string">'/user'</span>)</div><div class="line">      .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</div><div class="line">      .expect(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">        res.body.id = <span class="string">'some fixed id'</span>;</div><div class="line">        res.body.name = res.body.name.toUpperCase();</div><div class="line">      &#125;)</div><div class="line">      .expect(<span class="number">200</span>, &#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">'some fixed id'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'TOBI'</span></div><div class="line">      &#125;, done);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="sinon-测试代码"><a href="#sinon-测试代码" class="headerlink" title="sinon 测试代码"></a><a href="https://github.com/zhangmeng712/f2e-testing/blob/master/basic/test/test-sinon.html" target="_blank" rel="external">sinon 测试代码</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sinon用途&quot;&gt;&lt;a href=&quot;#sinon用途&quot; class=&quot;headerlink&quot; title=&quot;sinon用途&quot;&gt;&lt;/a&gt;sinon用途&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在测试领域 Test double是很重要的一个概念。Test double主要用在自动
    
    </summary>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/categories/nodejs/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/nodejs/testing/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="自动化测试" scheme="https://mengbaby.github.io/Mtags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="sinon" scheme="https://mengbaby.github.io/Mtags/sinon/"/>
    
  </entry>
  
  <entry>
    <title>响应式设计的自动化测试</title>
    <link href="https://mengbaby.github.io/2015/11/22/622/"/>
    <id>https://mengbaby.github.io/2015/11/22/622/</id>
    <published>2015-11-21T23:26:47.000Z</published>
    <updated>2017-04-17T07:19:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式设计介绍"><a href="#响应式设计介绍" class="headerlink" title="响应式设计介绍"></a>响应式设计介绍</h2><p>响应式设计（RWD）从2010年开始就逐渐进入人们的视线，虽然由于网速和网络的制约，目前国内都是采用针对pc和移动分别开发站点的策略，例如淘宝网的首页在pc端<a href="https://www.taobao.com/" target="_blank">网页</a> ，在移动端的网页为<a href="https://m.taobao.com/" target="_blank">网页</a>，使用的是基于REM的布局设计。但是没人能否认响应式设计的重要性和简便性。响应式设计其实简单来说就是利用media query针对不同的设备和分辨率采用不同的css样式，用以达到网站在各个设备上的兼容性，再结合“移动优先”的策略，使得响应式设计更加的具有优势。</p>
<h2 id="一个响应式设计的实现"><a href="#一个响应式设计的实现" class="headerlink" title="一个响应式设计的实现"></a>一个响应式设计的实现</h2><p>下面就举一个简单的响应式网站的<a href="http://testapp.galenframework.com/" target="_blank">例子</a>。<br>代码见<a href="https://github.com/zhangmeng712/f2e-testing/tree/master/ui-galen-tests/src" target="_blank">f2e-testing</a></p>
<ul>
<li>首页welcome页面</li>
<li>登陆页面</li>
<li>notes列表页面</li>
<li>新建note页面</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms03.alicdn.com/tps/i3/TB17Z2GKpXXXXaPXVXX3uuqZVXX-1206-658.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms02.alicdn.com/tps/i2/TB1..Y5KpXXXXXGXXXXcODnYFXX-389-786.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms01.alicdn.com/tps/i1/TB1wEnDKpXXXXb_XVXXzZlWPpXX-795-801.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="公共头尾和菜单的响应式实现"><a href="#公共头尾和菜单的响应式实现" class="headerlink" title="公共头尾和菜单的响应式实现"></a>公共头尾和菜单的响应式实现</h3><p>这个属于很经典的响应式菜单和标题设计：</p>
<ul>
<li>首页中如果是mobile或者ipad 则只显示标题的主要部分</li>
<li>菜单中如果是大屏，则一行显示菜单，mobile下用两行的菜单</li>
<li>css完整实现：<a href="https://github.com/zhangmeng712/f2e-testing/tree/master/ui-galen-tests/src" target="_blank">参见</a></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle-wrapper"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"header-logo"</span> <span class="attr">src</span>=<span class="string">"../src/assets/header-icon.png"</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Sample Website <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"not-on-mobile not-on-tablet"</span>&gt;</span>for Galen Framework<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#menu</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"images/menu-background.png"</span>);</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#menu</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#menu</span> <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#menu</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">500px</span>) &#123;</div><div class="line">    <span class="selector-class">.not-on-mobile</span> &#123;</div><div class="line">        <span class="attribute">display</span>: none;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-id">#menu</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#menu</span> <span class="selector-tag">li</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">49%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">800px</span>) &#123;</div><div class="line">    <span class="selector-class">.not-on-tablet</span> &#123;</div><div class="line">        <span class="attribute">display</span>: none;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="welcome页面"><a href="#welcome页面" class="headerlink" title="welcome页面"></a>welcome页面</h3><p>welcome页面：使用的是bootstrap的<a href="http://getbootstrap.com/examples/jumbotron/" target="_blank">jumbotron</a>的布局,这款响应式布局<br>主要用在simple marketing or informational website。它具有一个通知的大型“布告栏”（jumbotron）和三栏式布局。<br>主要的实现代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle-wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"welcome-page"</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to our test page!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>This app is used as a playground for <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://galenframework.com/"</span>&gt;</span>Galen Framework<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary button-login"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"App.showLoginPage();"</span>&gt;</span></div><div class="line">                    Login</div><div class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>To log in this website use the email <span class="tag">&lt;<span class="name">b</span>&gt;</span>testuser@example.com<span class="tag">&lt;/<span class="name">b</span>&gt;</span> and password <span class="tag">&lt;<span class="name">b</span>&gt;</span>test123<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.jumbotron &#123;</div><div class="line">  padding: 30px;</div><div class="line">  margin-bottom: 30px;</div><div class="line">  color: inherit;</div><div class="line">  background-color: #eee;</div><div class="line">&#125;</div><div class="line">.jumbotron h1,</div><div class="line">.jumbotron .h1 &#123;</div><div class="line">  color: inherit;</div><div class="line">&#125;</div><div class="line">.jumbotron p &#123;</div><div class="line">  margin-bottom: 15px;</div><div class="line">  font-size: 21px;</div><div class="line">  font-weight: 200;</div><div class="line">&#125;</div><div class="line">.container .jumbotron &#123;</div><div class="line">  border-radius: 6px;</div><div class="line">&#125;</div><div class="line">.jumbotron .container &#123;</div><div class="line">  max-width: 100%;</div><div class="line">&#125;</div><div class="line">//大于768px</div><div class="line">@media screen and (min-width: 768px) &#123;</div><div class="line">  .jumbotron &#123;</div><div class="line">    padding-top: 48px;</div><div class="line">    padding-bottom: 48px;</div><div class="line">  &#125;</div><div class="line">  .container .jumbotron &#123;</div><div class="line">    padding-right: 60px;</div><div class="line">    padding-left: 60px;</div><div class="line">  &#125;</div><div class="line">  .jumbotron h1,</div><div class="line">  .jumbotron .h1 &#123;</div><div class="line">    font-size: 63px;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media (max-width: 500px) &#123;</div><div class="line">    button &#123;</div><div class="line">        width: 100%;</div><div class="line">        margin-top: 10px;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="login登陆页面"><a href="#login登陆页面" class="headerlink" title="login登陆页面"></a>login登陆页面</h3><p>![] (<a href="http://gtms03.alicdn.com/tps/i3/TB1zvDUKpXXXXXvXpXXkao1KVXX-359-598.jpg" target="_blank" rel="external">http://gtms03.alicdn.com/tps/i3/TB1zvDUKpXXXXXvXpXXkao1KVXX-359-598.jpg</a>)<br>![] (<a href="http://gtms04.alicdn.com/tps/i4/TB1ZwPVKpXXXXanXpXXCIO.HpXX-1135-533.jpg" target="_blank" rel="external">http://gtms04.alicdn.com/tps/i4/TB1ZwPVKpXXXXanXpXXCIO.HpXX-1135-533.jpg</a>)</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">501px</span>) &#123;</div><div class="line">    <span class="selector-class">.dialog-panel</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">        <span class="attribute">margin</span>: auto;</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#ddd</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="响应式兼容尺寸"><a href="#响应式兼容尺寸" class="headerlink" title="响应式兼容尺寸"></a>响应式兼容尺寸</h3><ul>
<li>合理的使用viewport</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--或者使用如下的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用hack兼容低版本浏览器的media query</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line"><span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">&lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<ul>
<li>参考bootstrap 3 它优先使用“移动优先”原则，详情：<a href="http://getbootstrap.com/css/" target="_blank">参考</a><ul>
<li>Extra small devices ~ Phones (&lt; 768px) col-xs-</li>
<li>Small devices ~ Tablets (&gt;= 768px) col-sm-</li>
<li>Medium devices ~ Desktops (&gt;= 992px) col-md-</li>
<li>Large devices ~ Desktops (&gt;= 1200px) col-lg-</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*==========  Mobile First Method  ==========*/</span></div><div class="line"></div><div class="line"><span class="comment">/* RWD is – Desktop -&gt; Tablet -&gt; Mobile */</span></div><div class="line"><span class="comment">/* Mobile First RWD is – Mobile -&gt; Tablet -&gt; Desktop */</span></div><div class="line"></div><div class="line"><span class="comment">/* Custom, iPhone Retina */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">320px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Extra Small Devices, Phones */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">480px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Small Devices, Tablets */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">768px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Medium Devices, Desktops */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">992px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Large Devices, Wide Screens */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">1200px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*==========  Non-Mobile First Method  ==========*/</span></div><div class="line"></div><div class="line"><span class="comment">/* Large Devices, Wide Screens */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width : <span class="number">1200px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Medium Devices, Desktops */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width : <span class="number">992px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Small Devices, Tablets */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width : <span class="number">768px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Extra Small Devices, Phones */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width : <span class="number">480px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Custom, iPhone Retina */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width : <span class="number">320px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="响应式设计的自动化测试框架-galenframework"><a href="#响应式设计的自动化测试框架-galenframework" class="headerlink" title="响应式设计的自动化测试框架 - galenframework"></a>响应式设计的自动化测试框架 - galenframework</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>用于响应式设计的开源UI自动化测试框架</li>
<li>测试spec “语义化友好”，通过位置信息准确定位各个元素的位置</li>
<li>测试用例API兼容java和javascript</li>
<li>pc端和无线端多尺寸兼容，支持selenium appium saucelab browserstack多服务器测试</li>
<li>可自定义输出的测试 html report</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>下载<a href="https://github.com/galenframework/galen/releases/download/galen-2.1.2/galen-bin-2.1.2.zip" target="_blank">二进制代码</a></li>
<li>执行 ./install.sh</li>
<li>galen -v 显示如下命令行 表明安装成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Galen Framework</div><div class="line">Version: 2.1.2</div><div class="line">JavaScript executor: Rhino 1.7 release 5 2015 01 29</div></pre></td></tr></table></figure>
<h3 id="测试环境建立"><a href="#测试环境建立" class="headerlink" title="测试环境建立"></a>测试环境建立</h3><ul>
<li>执行 galen config：生成config文件用于配置初始化文件，具体参数配置 详情<a href="http://galenframework.com/docs/getting-started-configuration/" target="_blank">参见</a></li>
<li>文件结构<ul>
<li>tests文件夹：用于装载测试脚本<ul>
<li>init.js: 用于配置测试的设备和尺寸</li>
<li>pages文件夹： ui自动化测试的Page Object页面</li>
<li>login.page.test.js（默认是以.test.js后缀作为测试文件，如果有特殊要求可以在config文件中配置）</li>
</ul>
</li>
<li>specs文件夹: 用于装载响应式设计的规则spec文件<ul>
<li>common.spec文件：</li>
<li>loginPage.spec文件等等</li>
</ul>
</li>
<li>config文件：配置文件</li>
<li>reports目录：用于生成自动化测试的html结果</li>
</ul>
</li>
</ul>
<h3 id="构建测试服务"><a href="#构建测试服务" class="headerlink" title="构建测试服务"></a>构建测试服务</h3><ul>
<li>appium作为mobile的测试服务器，android真机测试的服务搭建,<a href="http://dj1211.com/?p=593" target="_blank">参考</a></li>
<li>selenium作为pc端的测试服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#server端：8002端口启动三星galaxy SIII设备的测试服务器；8001端口启动IPAD模拟器；启动chromepc端的测试服务器</div><div class="line">node . -a 127.0.0.1 -p 8002 -U 4df752b06833bfd3 --browser-name Chrome --no-reset</div><div class="line">node . -a 127.0.0.1 -p 8001 --command-timeout 50000  --no-reset</div><div class="line">selenium-standalone start</div></pre></td></tr></table></figure>
<p>#客户端：测试 并且测试完成后浏览器打开测试结果</p>
<p>Galen的命令行运行，<a href="http://galenframework.com/docs/reference-working-in-command-line/" target="_blank">参考</a></p>
<ul>
<li>galen check：运行spec</li>
<li>galen test： 运行测试用例</li>
<li>galen dump：生成可视化spec- </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">galen test mytest01.test</div><div class="line">    --htmlreport &quot;htmlreport-dir&quot;</div><div class="line">    --testngreport &quot;report/testng.xml&quot;</div><div class="line">    --jsonreport &quot;jsonreport-dir&quot;</div><div class="line">    --parallel-tests 4</div><div class="line">    </div><div class="line">galen test tests/ --htmlreport reports   </div><div class="line"></div><div class="line">galen check homepage.gspec</div><div class="line">    --url &quot;http://example.com&quot;</div><div class="line">    --size &quot;640x480&quot;</div><div class="line">    --javascript &quot;some.js&quot;</div><div class="line">    --include &quot;mobile,all&quot;</div><div class="line">    --exclude &quot;toexclude&quot;</div><div class="line">    --htmlreport &quot;htmlreport-dir&quot;</div><div class="line">    --testngreport &quot;report/testng.xml&quot;</div><div class="line">    --jsonreport &quot;jsonreport-dir&quot;</div><div class="line"></div><div class="line">galen dump &quot;specs/homepage.gspec&quot;</div><div class="line">    --url &quot;http://galenframework.com&quot;</div><div class="line">    --size &quot;1024x768&quot;</div><div class="line">    --export &quot;dumps/homepage-dump&quot; </div><div class="line">    --max-width &quot;200&quot; </div><div class="line">    --max-height &quot;200&quot;</div></pre></td></tr></table></figure>
<h3 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h3><p><img src="https://img.alicdn.com/tps/TB1s0OfKFXXXXb4XVXXXXXXXXXX-599-318.png"></p>
<h4 id="createGridDriver建立对服务器的链接-并启动driver"><a href="#createGridDriver建立对服务器的链接-并启动driver" class="headerlink" title="createGridDriver建立对服务器的链接,并启动driver"></a>createGridDriver建立对服务器的链接,并启动driver</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> driver = createGridDriver(<span class="string">'http://127.0.0.1:8001/wd/hub'</span>,&#123;</div><div class="line">                             <span class="attr">desiredCapabilities</span>: &#123;</div><div class="line">                                  <span class="attr">browserName</span>: <span class="string">'Safari'</span>,</div><div class="line">                                 <span class="string">'platformVersion'</span>: <span class="string">'9.1'</span>,</div><div class="line">                                 <span class="string">'platformName'</span>: <span class="string">'iOS'</span>,</div><div class="line">                                 <span class="string">'app'</span>: <span class="string">'safari'</span>,</div><div class="line">                                  <span class="attr">deviceName</span>:<span class="string">"iPad Air"</span>,</div><div class="line">                                  <span class="attr">size</span>: <span class="string">'600x800'</span>,</div><div class="line">                                  <span class="attr">safariInitialUrl</span>: <span class="string">'about:blank'</span></div><div class="line">                             &#125;</div><div class="line">                         &#125;)；</div><div class="line">driver.get(<span class="string">"http://test.xxxxx.com"</span>);</div></pre></td></tr></table></figure>
<h4 id="checkLayout连接spec文件和-test-js测试文件"><a href="#checkLayout连接spec文件和-test-js测试文件" class="headerlink" title="checkLayout连接spec文件和.test.js测试文件"></a>checkLayout连接spec文件和.test.js测试文件</h4><ul>
<li>编写测试脚本</li>
<li>编写spec文件</li>
</ul>
<p>检查spec文件是否符合预期</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义test</span></div><div class="line">test(<span class="string">"Simplest test"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// here goes a test code</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//[] spec中 @on的tag名称</span></div><div class="line">checkLayout(driver, <span class="string">"specs/welcomePage.spec"</span>, [<span class="string">'desktop'</span>]);</div></pre></td></tr></table></figure>
<h4 id="使用-Page-Object-Model"><a href="#使用-Page-Object-Model" class="headerlink" title="使用 Page Object Model"></a>使用 Page Object Model</h4><p><a href="https://code.google.com/p/selenium/wiki/PageObjects" target="_blank">PageObject</a>在selenium中是常见的设计模式，它可以快速的将测试用例和测试主体相互分开，通过复用，减少代码；同时可以把测试过程变化的参数在统一的地方配置，减少改动的成本。关于 Page Object我会再开文介绍，这里只为大家介绍在galenframework中我们可以如何快捷的定义我们的PageObject，以登陆页为参考：</p>
<p>$page(pageName, primaryFields, [ secondaryFields ])</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.LoginPage = $page(<span class="string">"Login page"</span>, &#123;</div><div class="line">  <span class="attr">email</span>: <span class="string">"input.email"</span>, <span class="comment">// css locator</span></div><div class="line">  password: <span class="string">"xpath: //input[@class='password']"</span>, <span class="comment">// xpath locator</span></div><div class="line">  submitButton: <span class="string">"id: submit"</span>, <span class="comment">// id locator</span></div><div class="line"></div><div class="line">  load: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.open(<span class="string">"http://example.com/login"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.waitForIt();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">loginAs</span>: <span class="function"><span class="keyword">function</span> (<span class="params">userName, password</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.email.typeText(userName);</div><div class="line">    <span class="keyword">this</span>.password.typeText(password);</div><div class="line">    <span class="keyword">this</span>.submitButton.click();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// now you can use it like this</span></div><div class="line"><span class="keyword">var</span> loginPage = <span class="keyword">new</span> LoginPage(driver).load();</div><div class="line">loginPage.loginAs(<span class="string">"testuser@example.com"</span>, <span class="string">"password"</span>);</div></pre></td></tr></table></figure>
<h3 id="页面的webdriver操作函数"><a href="#页面的webdriver操作函数" class="headerlink" title="页面的webdriver操作函数"></a>页面的webdriver操作函数</h3><p>参考 <a href="https://github.com/galenframework/galen/blob/master/galen-core/src/main/resources/js/GalenPages.js" target="_blank">GalenPage.js</a></p>
<ul>
<li>针对于$page这个对象<ul>
<li>open 打开页面</li>
<li>waitForIt 等到primaryFields的元素都</li>
<li>wait({}).untilAll({}); 等</li>
<li>getAllLocators：把</li>
<li>findChild 定位元素</li>
<li>findChildren 批量定位元素</li>
</ul>
</li>
</ul>
<ul>
<li>针对pageElement（primaryFields还有secondaryFields中的元素）<ul>
<li>attribute 获取属性</li>
<li>cssValue 获得css属性值</li>
<li>typeText input输入内容</li>
<li>click 点击按钮</li>
<li>clear 清空input</li>
<li>getText 获得输入的内容</li>
<li>hover </li>
<li>getWebElement</li>
<li>findChild</li>
<li>findChildren</li>
<li>isDisplayed 元素是否展现</li>
</ul>
</li>
</ul>
<h4 id="操作并输出到report中"><a href="#操作并输出到report中" class="headerlink" title="操作并输出到report中"></a>操作并输出到report中</h4><ul>
<li>logged(text, callback)</li>
<li>loggedFunction(textExpression, callback)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//$&#123;_1&#125; $&#123;_2&#125; 代表arguments</span></div><div class="line">loggedFunction(<span class="string">"Log-in as $&#123;_1&#125; with password $&#123;_2&#125;"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">email, password</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.emailTextfield.typeText(email);</div><div class="line">        <span class="keyword">this</span>.passwordTextfield.typeText(password);</div><div class="line">        <span class="keyword">this</span>.submitButton.click();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="spec文件编写"><a href="#spec文件编写" class="headerlink" title="spec文件编写"></a>spec文件编写</h4><p>spec文件是用于描述元素css之间的各种关系，符合语义化的要求，详情 <a href="http://galenframework.com/docs/reference-galen-spec-language-guide" target="_blank">参考</a></p>
<ul>
<li>定义Objects：@objects</li>
<li>tags和sections：= Main section = </li>
<li>变量 @set</li>
<li>import其他的spec文件规则：@import header.spec</li>
<li>forEach Loop：循环</li>
<li>near - checks that object is located near another object</li>
<li>below - checks that an element is located below other object</li>
<li>above - checks that an element is located above other object</li>
<li>left-of and right-of - checks that an element is located above other object</li>
<li>inside - checks that object is located inside another object</li>
<li>width - checks the width of object</li>
<li>height - checks the height of object</li>
<li>aligned - checks horizontal or vertical alignment of object with other objects on page</li>
<li>text - checks the text that is visible on page<ul>
<li>text is - checks that text is exactly as expected</li>
<li>text contains -checks element contains expected text</li>
<li>text starts - element should start with expected text</li>
<li>text ends - element should end with expected text</li>
<li>text matches - verifies that text matches Java Regular Expression</li>
</ul>
</li>
<li>centered - checks that object is centered inside another object</li>
<li>absent - checks that object is either missing on page or is not visible</li>
<li>contains - checks that object visually contains other objects inside it</li>
<li>on - checks that object is visually located on other object</li>
<li>component - runs a subset of specs from another file within the given object context</li>
<li>color-scheme - checks the color distribution in the given object area</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">@objects</div><div class="line">    search-panel            id      search-bar</div><div class="line">    search-panel-input      xpath   //div[@id='search-bar']/input[@type='text']</div><div class="line">    search-panel-button     css     #search-bar a</div><div class="line">    menu-item-*     css     #menu li a </div><div class="line">    </div><div class="line"> = Main section = </div><div class="line">    @on *</div><div class="line">        menu:</div><div class="line">            height 70px </div><div class="line">    @on mobile</div><div class="line">        login-button:</div><div class="line">            width 100px  </div><div class="line">    @on mobile, desktop</div><div class="line">        menu:</div><div class="line">            height 300 px   </div><div class="line">   </div><div class="line">   </div><div class="line">   @set</div><div class="line">    commonHeaderMargin    10 to 20px </div><div class="line">    contentMargin  ~ 20px # Approximate</div><div class="line">    </div><div class="line">  = Header =</div><div class="line">    header-icon:</div><div class="line">        inside header $&#123;commonHeaderMargin&#125; top left   </div><div class="line">        </div><div class="line">  textfield:</div><div class="line">    near button 5 to 15px left            </div><div class="line">  </div><div class="line">  # By top edge</div><div class="line">  menu-item-1:</div><div class="line">    aligned horizontally top menu-item-2 </div><div class="line">  </div><div class="line">  # iframe中定义spec </div><div class="line">  @objects</div><div class="line">    banner-frame     css  iframe#banner</div><div class="line"></div><div class="line">= Main section =</div><div class="line">    banner-frame:</div><div class="line">        component frame banner.spec </div><div class="line">  </div><div class="line"> # color scheme  </div><div class="line"> login-form:</div><div class="line">    color-scheme 10% white, 4 to 5 % black, &lt; 30% #f845b7 </div><div class="line">  </div><div class="line"> # image</div><div class="line"> menu-item-1:</div><div class="line">    image file imgs/menu-item-1.png, error 4%, tolerance 80  </div><div class="line">    </div><div class="line"> # 循环</div><div class="line"> = Main section =</div><div class="line">    @forEach [menu-item-*] as itemName, prev as previousItem</div><div class="line">        $&#123;itemName&#125;:</div><div class="line">            right-of $&#123;previousItem&#125; 10px </div><div class="line">           </div><div class="line">     @for [ 1, 2 ] as index</div><div class="line">            menu-item-$&#123;index&#125;:</div><div class="line">                above menu-item-$&#123;index + 2&#125; 0 to 5px</div></pre></td></tr></table></figure>
<h3 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h3><ul>
<li>代码：参见<a href="https://github.com/zhangmeng712/f2e-testing/tree/master/ui-galen-tests/" target="_blank">ui-galen-test</a></li>
<li>报表：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://img.alicdn.com/tps/TB1rFSCKFXXXXXkXpXXXXXXXXXX-1361-486.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://img.alicdn.com/tps/TB1t2aKKFXXXXXEXXXXXXXXXXXX-822-605.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://img.alicdn.com/tps/TB1BuuAKFXXXXX3XpXXXXXXXXXX-798-682.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;响应式设计介绍&quot;&gt;&lt;a href=&quot;#响应式设计介绍&quot; class=&quot;headerlink&quot; title=&quot;响应式设计介绍&quot;&gt;&lt;/a&gt;响应式设计介绍&lt;/h2&gt;&lt;p&gt;响应式设计（RWD）从2010年开始就逐渐进入人们的视线，虽然由于网速和网络的制约，目前国内都是采用
    
    </summary>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/categories/nodejs/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/nodejs/testing/"/>
    
      <category term="responsive design" scheme="https://mengbaby.github.io/categories/nodejs/testing/responsive-design/"/>
    
    
      <category term="appium" scheme="https://mengbaby.github.io/Mtags/appium/"/>
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="css3" scheme="https://mengbaby.github.io/Mtags/css3/"/>
    
      <category term="galenframework" scheme="https://mengbaby.github.io/Mtags/galenframework/"/>
    
      <category term="responsive design" scheme="https://mengbaby.github.io/Mtags/responsive-design/"/>
    
      <category term="UI自动化测试" scheme="https://mengbaby.github.io/Mtags/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="响应式设计" scheme="https://mengbaby.github.io/Mtags/%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试基础-断言篇：chai和chai插件的用法</title>
    <link href="https://mengbaby.github.io/2015/11/11/613/"/>
    <id>https://mengbaby.github.io/2015/11/11/613/</id>
    <published>2015-11-11T06:32:50.000Z</published>
    <updated>2017-04-17T07:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="chai"><a href="#chai" class="headerlink" title="chai"></a>chai</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 测试技术的断言框架。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>支持多种BDD/TDD断言语法<ul>
<li>BDD：should</li>
<li>BDD：expect</li>
<li>TDD：assert</li>
</ul>
</li>
<li>可用在browser端和node端。</li>
<li>可以和很多测试框架结合例如mocha jasmine等进行单元和UI测试。</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install chai</div></pre></td></tr></table></figure>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="browser端"><a href="#browser端" class="headerlink" title="browser端"></a>browser端</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/chai/3.4.0/chai.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="comment">//expect为全局的函数</span></div><div class="line">   expect(foo).to.not.equal(<span class="string">'bar'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="node端"><a href="#node端" class="headerlink" title="node端"></a>node端</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>),</div><div class="line">    expect = chai.expect;</div><div class="line">chai.should();</div></pre></td></tr></table></figure>
<h3 id="expect用法"><a href="#expect用法" class="headerlink" title="expect用法"></a>expect用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//------------------ 连接词用法 -----------------</span></div><div class="line"><span class="comment">//not用法 expect().not.to.</span></div><div class="line">expect(foo).to.not.equal(<span class="string">'bar'</span>);</div><div class="line">expect(goodFn).to.not.throw(<span class="built_in">Error</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'baz'</span> &#125;).to.have.property(<span class="string">'foo'</span>).and.not.equal(<span class="string">'bar'</span>);</div><div class="line"></div><div class="line"><span class="comment">//deep用法 expect(foo).to.deep. 通常和equal连用，判断object的相等需要用deep</span></div><div class="line">expect(foo).to.deep.equal(&#123; <span class="attr">bar</span>: <span class="string">'baz'</span> &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//any用法 用在keys的判断上</span></div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.have.any.keys(<span class="string">'foo'</span>, <span class="string">'baz'</span>);</div><div class="line"></div><div class="line"><span class="comment">// all用法 用在keys的判断上</span></div><div class="line">expect(foo).to.have.all.keys(<span class="string">'bar'</span>, <span class="string">'baz'</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.have.all.keys([<span class="string">'bar'</span>, <span class="string">'foo'</span>]);</div><div class="line"></div><div class="line"><span class="comment">//a 判断typeof 或者 language chain</span></div><div class="line"><span class="comment">// typeof</span></div><div class="line">expect(<span class="string">'test'</span>).to.be.a(<span class="string">'string'</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;).to.be.an(<span class="string">'object'</span>);</div><div class="line">expect(<span class="literal">null</span>).to.be.a(<span class="string">'null'</span>);</div><div class="line">expect(<span class="literal">undefined</span>).to.be.an(<span class="string">'undefined'</span>);</div><div class="line"></div><div class="line"><span class="comment">// language chain</span></div><div class="line">expect(foo).to.be.an.instanceof(Foo);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//---------------------判断bool----------------------</span></div><div class="line"><span class="comment">//bool</span></div><div class="line"><span class="comment">// 1 truthy</span></div><div class="line">expect(<span class="string">'everthing'</span>).to.be.ok;</div><div class="line">expect(<span class="number">1</span>).to.be.ok;</div><div class="line">expect(<span class="literal">false</span>).to.not.be.ok;</div><div class="line">expect(<span class="literal">undefined</span>).to.not.be.ok;</div><div class="line">expect(<span class="literal">null</span>).to.not.be.ok;</div><div class="line"></div><div class="line"><span class="comment">//2 true</span></div><div class="line">expect(<span class="literal">true</span>).to.be.true;</div><div class="line">expect(<span class="number">1</span>).to.not.be.true;</div><div class="line"></div><div class="line"><span class="comment">//3 false</span></div><div class="line">expect(<span class="literal">false</span>).to.be.false;</div><div class="line">expect(<span class="number">0</span>).to.not.be.false;</div><div class="line"></div><div class="line"><span class="comment">//4 null</span></div><div class="line">expect(<span class="literal">null</span>).to.be.null;</div><div class="line">expect(<span class="literal">undefined</span>).not.to.be.null;</div><div class="line"></div><div class="line"><span class="comment">// 5 undefined</span></div><div class="line">expect(<span class="literal">undefined</span>).to.be.undefined;</div><div class="line">expect(<span class="literal">null</span>).to.not.be.undefined;</div><div class="line"></div><div class="line"><span class="comment">//6 exist</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">'hi'</span></div><div class="line">  , bar = <span class="literal">null</span></div><div class="line">  , baz;</div><div class="line"></div><div class="line">expect(foo).to.exist;</div><div class="line">expect(bar).to.not.exist;</div><div class="line">expect(baz).to.not.exist;</div><div class="line"></div><div class="line"><span class="comment">//7 expty</span></div><div class="line">expect([]).to.be.empty;</div><div class="line">expect(<span class="string">''</span>).to.be.empty;</div><div class="line">expect(&#123;&#125;).to.be.empty;</div><div class="line"></div><div class="line"><span class="comment">//------------------------判断函数参数---------------------------</span></div><div class="line"><span class="comment">// arguments</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  expect(<span class="built_in">arguments</span>).to.be.arguments;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//------------------------判断相等和大小关系--------------------------------</span></div><div class="line"><span class="comment">// equal if the deep flag is set, </span></div><div class="line"><span class="comment">// attention: asserts that the target is deeply equal to value.</span></div><div class="line">expect(<span class="string">'hello'</span>).to.equal(<span class="string">'hello'</span>);</div><div class="line">expect(<span class="number">42</span>).to.equal(<span class="number">42</span>);</div><div class="line">expect(<span class="number">1</span>).to.not.equal(<span class="literal">true</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;).to.not.equal(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;).to.deep.equal(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// eql: 判断值等</span></div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;).to.eql(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);</div><div class="line">expect([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]).to.eql([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]);</div><div class="line"></div><div class="line"><span class="comment">//.above：大于</span></div><div class="line"></div><div class="line">expect(<span class="number">10</span>).to.be.above(<span class="number">5</span>);</div><div class="line">expect(<span class="string">'foo'</span>).to.have.length.above(<span class="number">2</span>);</div><div class="line">expect([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]).to.have.length.above(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//least 至少</span></div><div class="line">expect(<span class="string">'foo'</span>).to.have.length.of.at.least(<span class="number">2</span>);</div><div class="line">expect([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]).to.have.length.of.at.least(<span class="number">3</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//below 低于</span></div><div class="line">expect(<span class="number">5</span>).to.be.below(<span class="number">10</span>);</div><div class="line">expect(<span class="string">'foo'</span>).to.have.length.below(<span class="number">4</span>);</div><div class="line">expect([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]).to.have.length.below(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">//most 最大为</span></div><div class="line">expect(<span class="number">5</span>).to.be.at.most(<span class="number">5</span>);</div><div class="line">expect(<span class="string">'foo'</span>).to.have.length.of.at.most(<span class="number">4</span>);</div><div class="line">expect([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]).to.have.length.of.at.most(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">//.within(start, finish)在什么区间内</span></div><div class="line">expect(<span class="number">7</span>).to.be.within(<span class="number">5</span>,<span class="number">10</span>);</div><div class="line">expect(<span class="string">'foo'</span>).to.have.length.within(<span class="number">2</span>,<span class="number">4</span>);</div><div class="line">expect([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]).to.have.length.within(<span class="number">2</span>,<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">//.closeTo(expected, delta)</span></div><div class="line">expect(<span class="number">1.5</span>).to.be.closeTo(<span class="number">1</span>, <span class="number">0.5</span>);</div><div class="line"></div><div class="line"><span class="comment">//------------------正则---------------</span></div><div class="line"></div><div class="line"><span class="comment">//match(regexp)</span></div><div class="line">expect(<span class="string">'foobar'</span>).to.match(<span class="regexp">/^foo/</span>);</div><div class="line"></div><div class="line"><span class="comment">//-----------------字符串-------------</span></div><div class="line"><span class="comment">//string 判断含有某字符串</span></div><div class="line">expect(<span class="string">'foobar'</span>).to.have.string(<span class="string">'bar'</span>);</div><div class="line"></div><div class="line"><span class="comment">//----------------throw---------------</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">'This is a bad function.'</span>);</div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">throw</span> err; &#125;</div><div class="line">expect(fn).to.throw(<span class="built_in">ReferenceError</span>);</div><div class="line">expect(fn).to.throw(<span class="built_in">Error</span>);</div><div class="line">expect(fn).to.throw(<span class="regexp">/bad function/</span>);</div><div class="line">expect(fn).to.not.throw(<span class="string">'good function'</span>);</div><div class="line">expect(fn).to.throw(<span class="built_in">ReferenceError</span>, /bad <span class="function"><span class="keyword">function</span>/);</span></div><div class="line"><span class="title">expect</span>(<span class="params">fn</span>).<span class="title">to</span>.<span class="title">throw</span>(<span class="params">err</span>);</div><div class="line"><span class="title">expect</span>(<span class="params">fn</span>).<span class="title">to</span>.<span class="title">not</span>.<span class="title">throw</span>(<span class="params">new RangeError(<span class="string">'Out of range.'</span></span>));</div><div class="line"></div><div class="line">//------------------------<span class="title">object</span>相关判断-------------------------</div><div class="line">//<span class="title">deep</span> &amp; <span class="title">property</span>属性</div><div class="line"><span class="title">expect</span>(<span class="params">foo</span>).<span class="title">to</span>.<span class="title">deep</span>.<span class="title">equal</span>(<span class="params">&#123; bar: <span class="string">'baz'</span> &#125;</span>);</div><div class="line"><span class="title">expect</span>(<span class="params">&#123; foo: &#123; bar: &#123; baz: <span class="string">'quux'</span> &#125; &#125; &#125;</span>).<span class="title">to</span>.<span class="title">have</span>.<span class="title">deep</span>.<span class="title">property</span>(<span class="params"><span class="string">'foo.bar.baz'</span>, <span class="string">'quux'</span></span>);</div><div class="line"></div><div class="line"></div><div class="line">// <span class="title">typeof</span></div><div class="line"><span class="title">expect</span>(<span class="params"><span class="string">'test'</span></span>).<span class="title">to</span>.<span class="title">be</span>.<span class="title">a</span>(<span class="params"><span class="string">'string'</span></span>);</div><div class="line"><span class="title">expect</span>(<span class="params">&#123; foo: <span class="string">'bar'</span> &#125;</span>).<span class="title">to</span>.<span class="title">be</span>.<span class="title">an</span>(<span class="params"><span class="string">'object'</span></span>);</div><div class="line"><span class="title">expect</span>(<span class="params">null</span>).<span class="title">to</span>.<span class="title">be</span>.<span class="title">a</span>(<span class="params"><span class="string">'null'</span></span>);</div><div class="line"><span class="title">expect</span>(<span class="params">undefined</span>).<span class="title">to</span>.<span class="title">be</span>.<span class="title">an</span>(<span class="params"><span class="string">'undefined'</span></span>);</div><div class="line"></div><div class="line">// <span class="title">language</span> <span class="title">chain</span></div><div class="line"><span class="title">expect</span>(<span class="params">foo</span>).<span class="title">to</span>.<span class="title">be</span>.<span class="title">an</span>.<span class="title">instanceof</span>(<span class="params">Foo</span>);</div><div class="line"></div><div class="line">// <span class="title">include</span></div><div class="line"><span class="title">expect</span>(<span class="params">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>).<span class="title">to</span>.<span class="title">include</span>(<span class="params"><span class="number">2</span></span>);</div><div class="line"><span class="title">expect</span>(<span class="params"><span class="string">'foobar'</span></span>).<span class="title">to</span>.<span class="title">contain</span>(<span class="params"><span class="string">'foo'</span></span>);</div><div class="line"><span class="title">expect</span>(<span class="params">&#123; foo: <span class="string">'bar'</span>, hello: <span class="string">'universe'</span> &#125;</span>).<span class="title">to</span>.<span class="title">include</span>.<span class="title">keys</span>(<span class="params"><span class="string">'foo'</span></span>);</div><div class="line"></div><div class="line">// <span class="title">members</span> 判断数组成员</div><div class="line"><span class="title">expect</span>(<span class="params">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span>).<span class="title">to</span>.<span class="title">include</span>.<span class="title">members</span>(<span class="params">[<span class="number">3</span>, <span class="number">2</span>]</span>);</div><div class="line"><span class="title">expect</span>(<span class="params">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span>).<span class="title">to</span>.<span class="title">not</span>.<span class="title">include</span>.<span class="title">members</span>(<span class="params">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>]</span>);</div><div class="line"></div><div class="line"><span class="title">expect</span>(<span class="params">[<span class="number">4</span>, <span class="number">2</span>]</span>).<span class="title">to</span>.<span class="title">have</span>.<span class="title">members</span>(<span class="params">[<span class="number">2</span>, <span class="number">4</span>]</span>);</div><div class="line"><span class="title">expect</span>(<span class="params">[<span class="number">5</span>, <span class="number">2</span>]</span>).<span class="title">to</span>.<span class="title">not</span>.<span class="title">have</span>.<span class="title">members</span>(<span class="params">[<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</span>);</div><div class="line"><span class="title">expect</span>(<span class="params">[&#123; id: <span class="number">1</span> &#125;]</span>).<span class="title">to</span>.<span class="title">deep</span>.<span class="title">include</span>.<span class="title">members</span>(<span class="params">[&#123; id: <span class="number">1</span> &#125;]</span>);</div><div class="line"></div><div class="line"></div><div class="line">//<span class="title">respondTo</span>(<span class="params">method</span>) 判断是否是原型方法</div><div class="line"><span class="title">Klass</span>.<span class="title">prototype</span>.<span class="title">bar</span> = <span class="title">function</span>(<span class="params"></span>)&#123;&#125;;</div><div class="line">expect(Klass).to.respondTo(<span class="string">'bar'</span>);</div><div class="line">expect(obj).to.respondTo(<span class="string">'bar'</span>);</div><div class="line"></div><div class="line">Klass.baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">expect(Klass).itself.to.respondTo(<span class="string">'baz'</span>);</div><div class="line"></div><div class="line"><span class="comment">//itself和respondTo结合起来判断是否是原型链的方法还是自身的方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Foo.bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Foo.prototype.baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">expect(Foo).itself.to.respondTo(<span class="string">'bar'</span>);</div><div class="line">expect(Foo).itself.not.to.respondTo(<span class="string">'baz'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//change 判断函数是否改变了对象的属性值</span></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">val</span>: <span class="number">10</span> &#125;;</div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; obj.val += <span class="number">3</span> &#125;;</div><div class="line"><span class="keyword">var</span> noChangeFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'foo'</span> + <span class="string">'bar'</span>; &#125;</div><div class="line">expect(fn).to.change(obj, <span class="string">'val'</span>);</div><div class="line">expect(noChangFn).to.not.change(obj, <span class="string">'val'</span>)</div><div class="line"></div><div class="line"><span class="comment">//increase(function) 函数是否升高了属性值</span></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">val</span>: <span class="number">10</span> &#125;;</div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; obj.val = <span class="number">15</span> &#125;;</div><div class="line">expect(fn).to.increase(obj, <span class="string">'val'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//.decrease(function) 函数是否降低了属性值</span></div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">val</span>: <span class="number">10</span> &#125;;</div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; obj.val = <span class="number">5</span> &#125;;</div><div class="line">expect(fn).to.decrease(obj, <span class="string">'val'</span>);</div><div class="line"></div><div class="line"><span class="comment">//keys.判断是否object含有某项属性</span></div><div class="line"><span class="comment">//Note, either any or all should be used in the assertion. If neither are used, the assertion is defaulted to all.</span></div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.have.any.keys(<span class="string">'foo'</span>, <span class="string">'baz'</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.have.any.keys(<span class="string">'foo'</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.contain.any.keys(<span class="string">'bar'</span>, <span class="string">'baz'</span>);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.contain.any.keys([<span class="string">'foo'</span>]);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.contain.any.keys(&#123;<span class="string">'foo'</span>: <span class="number">6</span>&#125;);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.have.all.keys([<span class="string">'bar'</span>, <span class="string">'foo'</span>]);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;).to.have.all.keys(&#123;<span class="string">'bar'</span>: <span class="number">6</span>, <span class="string">'foo'</span>, <span class="number">7</span>&#125;);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>, <span class="attr">baz</span>: <span class="number">3</span> &#125;).to.contain.all.keys([<span class="string">'bar'</span>, <span class="string">'foo'</span>]);</div><div class="line">expect(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>, <span class="attr">baz</span>: <span class="number">3</span> &#125;).to.contain.all.keys([&#123;<span class="string">'bar'</span>: <span class="number">6</span>&#125;&#125;]);</div></pre></td></tr></table></figure>
<h3 id="should用法"><a href="#should用法" class="headerlink" title="should用法"></a>should用法</h3><p>同chai的差别详情<a href="http://chaijs.com/guide/styles/" target="_blank">参考</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line">chai.should();</div><div class="line">    <span class="comment">//语法： 基本是 expect().to.xx 相当于 ().should.xx ****</span></div><div class="line">    foo.should.be.a(<span class="string">'string'</span>); <span class="comment">//expect(foo).to.be.a('string');</span></div><div class="line">    foo.should.equal(<span class="string">'bar'</span>); <span class="comment">//expect(foo).to.equal('bar');</span></div><div class="line">    <span class="comment">//省略用法，见expect</span></div></pre></td></tr></table></figure></p>
<p>注意：should在IE9下有问题</p>
<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>assert为TDD用法，现在一般都是用基于BDD的测试，所以省略，详情请参考 <a href="" target="">Assert</a></p>
<h2 id="chai-as-promise用法"><a href="#chai-as-promise用法" class="headerlink" title="chai as promise用法"></a>chai as promise用法</h2><ul>
<li>将promise和chai结合起来，用于在某种异步的条件下形成的断言判断</li>
<li>attention： Chai as Promised is only compatible with modern browsers (IE ≥9, Safari ≥6, no PhantomJS)</li>
<li>具体用法：<a href="https://github.com/domenic/chai-as-promised/" target="_blank">参见</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">doSomethingAsync().then(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">        result.should.equal(<span class="string">"foo"</span>);</div><div class="line">        done();</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">       done(err);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">//安装： npm install chai-as-promised</span></div><div class="line"><span class="comment">//引用chai as promise后可以写作 should.eventually.xxx</span></div><div class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>);</div><div class="line"><span class="keyword">var</span> chaiAsPromised = <span class="built_in">require</span>(<span class="string">"chai-as-promised"</span>);</div><div class="line">chai.use(chaiAsPromised);</div><div class="line"><span class="keyword">var</span> should = chai.should();</div><div class="line"></div><div class="line"><span class="keyword">return</span> doSomethingAsync().should.eventually.equal(<span class="string">"foo"</span>);</div><div class="line"></div><div class="line"><span class="comment">//在ui测试中可以写作</span></div><div class="line"><span class="keyword">return</span> driver.getAttribute(input, <span class="string">'type'</span>).should.eventually.equal(fieldModel.type);</div><div class="line"></div><div class="line"><span class="keyword">return</span> promise.should.be.fulfilled;</div><div class="line"><span class="keyword">return</span> promise.should.eventually.deep.equal(<span class="string">"foo"</span>);</div><div class="line"><span class="keyword">return</span> promise.should.become(<span class="string">"foo"</span>); <span class="comment">// same as `.eventually.deep.equal`</span></div><div class="line"><span class="keyword">return</span> promise.should.be.rejected;</div><div class="line"><span class="keyword">return</span> promise.should.be.rejectedWith(<span class="built_in">Error</span>); <span class="comment">// other variants of Chai's `throw` assertion work too.</span></div><div class="line"></div><div class="line"><span class="comment">// 通过覆盖chaiAsPromised.transferPromiseness方法将assertion赋予then的链式调用功能</span></div><div class="line"><span class="comment">// 应用例子 wd.js中 chaiAsPromised.transferPromiseness = wd.transferPromiseness;</span></div><div class="line"></div><div class="line">chaiAsPromised.transferPromiseness = <span class="function"><span class="keyword">function</span> (<span class="params">assertion, promise</span>) </span>&#123;</div><div class="line">    assertion.then = promise.then.bind(promise); <span class="comment">// this is all you get by default</span></div><div class="line">    assertion.finally = promise.finally.bind(promise);</div><div class="line">    assertion.done = promise.done.bind(promise);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="sinon-chai用法"><a href="#sinon-chai用法" class="headerlink" title="sinon-chai用法"></a>sinon-chai用法</h2><ul>
<li>sinon-chai 用于对<a href="http://sinonjs.org/" target="_blank">Sinon.JS</a>中的spy, stub, and mocking framework进行断言</li>
<li>具体用法，<a href="http://chaijs.com/plugins/sinon-chai" target="_blank">参见</a></li>
<li>API为：</li>
</ul>
<table>
<thead>
<tr>
<th>Sinon.JS property/method</th>
<th>Sinon–Chai assertion</th>
</tr>
</thead>
<tbody>
<tr>
<td>called</td>
<td>spy.should.have.been.called</td>
</tr>
<tr>
<td>callCount</td>
<td>spy.should.have.callCount(n)</td>
</tr>
<tr>
<td>calledOnce</td>
<td>spy.should.have.been.calledOnce</td>
</tr>
<tr>
<td>calledTwice</td>
<td>spy.should.have.been.calledTwice</td>
</tr>
<tr>
<td>calledThrice</td>
<td>spy.should.have.been.calledThrice</td>
</tr>
<tr>
<td>calledBefore</td>
<td>spy1.should.have.been.calledBefore(spy2)</td>
</tr>
<tr>
<td>calledAfter</td>
<td>spy1.should.have.been.calledAfter(spy2)</td>
</tr>
<tr>
<td>calledWithNew</td>
<td>spy.should.have.been.calledWithNew</td>
</tr>
<tr>
<td>alwaysCalledWithNew</td>
<td>spy.should.always.have.been.calledWithNew</td>
</tr>
<tr>
<td>calledOn</td>
<td>spy.should.have.been.calledOn(context)</td>
</tr>
<tr>
<td>alwaysCalledOn</td>
<td>spy.should.always.have.been.calledOn(context)</td>
</tr>
<tr>
<td>calledWith</td>
<td>spy.should.have.been.calledWith(…args)</td>
</tr>
<tr>
<td>alwaysCalledWith</td>
<td>spy.should.always.have.been.calledWith(…args)</td>
</tr>
<tr>
<td>calledWithExactly</td>
<td>spy.should.have.been.calledWithExactly(…args)</td>
</tr>
<tr>
<td>alwaysCalledWithExactly</td>
<td>spy.should.always.have.been.calledWithExactly(…args)</td>
</tr>
<tr>
<td>calledWithMatch</td>
<td>spy.should.have.been.calledWithMatch(…args)</td>
</tr>
<tr>
<td>alwaysCalledWithMatch</td>
<td>spy.should.always.have.been.calledWithMatch(…args)</td>
</tr>
<tr>
<td>returned</td>
<td>spy.should.have.returned(returnVal)</td>
</tr>
<tr>
<td>alwaysReturned</td>
<td>spy.should.have.always.returned(returnVal)</td>
</tr>
<tr>
<td>threw</td>
<td>spy.should.have.thrown(errorObjOrErrorTypeStringOrNothing)</td>
</tr>
<tr>
<td>alwaysThrew</td>
<td>spy.should.have.always.thrown(errorObjOrErrorTypeStringOrNothing)</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//安装 npm install sinon-chai</span></div><div class="line"><span class="comment">//用法</span></div><div class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>);</div><div class="line"><span class="keyword">var</span> sinonChai = <span class="built_in">require</span>(<span class="string">"sinon-chai"</span>);</div><div class="line">chai.should();</div><div class="line">chai.use(sinonChai);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name, cb</span>) </span>&#123;</div><div class="line">    cb(<span class="string">"hello "</span> + name);</div><div class="line">&#125;</div><div class="line">describe(<span class="string">"hello"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">"should call callback with correct greeting"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cb = sinon.spy();</div><div class="line">        hello(<span class="string">"foo"</span>, cb);</div><div class="line">        cb.should.have.been.calledWith(<span class="string">"hello foo"</span>);</div><div class="line">        <span class="comment">//if expect expect(cb).to.have.been.calledWith("hello foo");</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="chai和mocha结合的测试用例"><a href="#chai和mocha结合的测试用例" class="headerlink" title="chai和mocha结合的测试用例"></a>chai和mocha结合的测试用例</h3><ul>
<li>browser端：<a href="http://chaijs.com/api/test/" target="_blank">点击</a></li>
<li>node端:<ul>
<li><a href="https://github.com/zhangmeng712/f2e-testing/blob/master/basic/test/chai-should.js" target="_blank">chai-should.js</a></li>
<li><a href="https://github.com/zhangmeng712/f2e-testing/blob/master/basic/test/chai-expect.js" target="_blank">chai-expect.js</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;chai&quot;&gt;&lt;a href=&quot;#chai&quot; class=&quot;headerlink&quot; title=&quot;chai&quot;&gt;&lt;/a&gt;chai&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h
    
    </summary>
    
      <category term="javascript" scheme="https://mengbaby.github.io/categories/javascript/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/javascript/testing/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="自动化测试" scheme="https://mengbaby.github.io/Mtags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="chai" scheme="https://mengbaby.github.io/Mtags/chai/"/>
    
      <category term="chai as promise" scheme="https://mengbaby.github.io/Mtags/chai-as-promise/"/>
    
      <category term="mocha" scheme="https://mengbaby.github.io/Mtags/mocha/"/>
    
      <category term="ui测试" scheme="https://mengbaby.github.io/Mtags/ui%E6%B5%8B%E8%AF%95/"/>
    
      <category term="单元测试" scheme="https://mengbaby.github.io/Mtags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="断言" scheme="https://mengbaby.github.io/Mtags/%E6%96%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Appium的源码编译安装</title>
    <link href="https://mengbaby.github.io/2015/10/22/593/"/>
    <id>https://mengbaby.github.io/2015/10/22/593/</id>
    <published>2015-10-22T01:08:14.000Z</published>
    <updated>2017-04-17T05:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Appium是现在比较活跃的开源自动化测试平台，因为更新速度很快，建议编译安装，了解其更多有意思的功能。<br>Appium支持ios android selendroid的自动化测试。在mac下配置ios环境还是相对简单的，但是android真机的配置就不是那么简单了，在此详细记录基于源码的编译安装。</p>
<h2 id="准备工作-node"><a href="#准备工作-node" class="headerlink" title="准备工作 node"></a>准备工作 node</h2><ul>
<li>git clone <a href="https://github.com/appium/appium.git" target="_blank" rel="external">https://github.com/appium/appium.git</a></li>
<li>安装好node环境（brew安装最好）</li>
<li><p>安装 mocha 和grunt-cli</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g mocha</div><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure>
<h2 id="android真机配置"><a href="#android真机配置" class="headerlink" title="android真机配置"></a>android真机配置</h2><p>因为android虚拟器跑起来非常慢，如果不是专业的android的开发，安装跑andorid studio环境也没有必要<br>有对应的apk和sdk使用真机就能跑我们的测试脚本了。</p>
<h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3></li>
<li><p>安装java jdk 配置JAVA_HOME</p>
</li>
<li>安装android jdk，可以在线安装（国内速度超慢），所以快捷的方式是下载adt-bundle，解压后直接可用，<a href="https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip" target="_blank" rel="external">下载地址</a></li>
<li>配置ANDROID_HOME</li>
<li>环境变量的配置代码见下方:</li>
<li><p>执行环境检测 bin/appium-doctor.js –android 出现如下结果证明android环境配置成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ~/.bash_profile的配置内容</div><div class="line"># 修改完之后source ~/.bash_profile生效</div><div class="line"></div><div class="line">export ANDROID_HOME=/Users/zhangmeng/Documents/adt-bundle-mac-x86_64-20131030/sdk</div><div class="line">export PATH=/Users/zhangmeng/Documents/adt-bundle-mac-x86_64-20131030/sdk/platform-tools:$PATH</div><div class="line">export PATH=/Users/zhangmeng/Documents/adt-bundle-mac-x86_64-20131030/sdk/tools:$PATH</div><div class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<p><img src="http://gtms04.alicdn.com/tps/i4/TB1d.8kKXXXXXXFaXXXHH2ZNpXX-822-195.jpg" alt=""></p>
<h3 id="配置手机"><a href="#配置手机" class="headerlink" title="配置手机"></a>配置手机</h3></li>
<li><p>开启开发者选项，设置-{}开发者选项，如果没有找到，<a href="http://android.d.cn/news/83907.html" target="_blank" rel="external">参考</a></p>
</li>
<li>打开USB调试（如下图）</li>
<li>部分手机需要在 连接USB的时候选用 MTP媒体模式才会生效</li>
<li><p>在命令行执行如下指令，能够列出后（如果不行, 重新插拔一下usb，还可以尝试<a href="https://nishantverma.gitbooks.io/appium-for-android/content/executing_test_on_real_devices/index.html" target="_blank" rel="external">方法</a>）</p>
<p><img src="http://gtms02.alicdn.com/tps/i2/TB1Fb0vKXXXXXXeXVXXeOeo8FXX-750-1000.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb kill-server</div><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>其中list出来的就是手机的udid，用于后面的测试使用，如下图<br><img src="http://gtms03.alicdn.com/tps/i3/TB1diXtKXXXXXXMXVXXct.03pXX-675-79.jpg" alt=""></p>
<h3 id="执行初始化脚本"><a href="#执行初始化脚本" class="headerlink" title="执行初始化脚本"></a>执行初始化脚本</h3><p>按照上面的步骤执行完成之后，运行命令./reset.sh –andorid –verbose即可。<br>在没有读这个reset.sh脚本的时候真的是被各种的环境搞的头晕脑胀，各种报错，包括：<br>基本都是有命令运行不通造成的，所以在这里大概介绍一下在appium reset android中的到底做了些什么，帮助大家理解这个启动脚本，以便配合自己的应用解决编译的问题，这个也是源码编译的好处之一，可以及时的解决更新服务。</p>
</li>
<li><p>android API 不匹配</p>
</li>
<li>Device chrome not configured yet</li>
<li><p>uninstall io.appium.android.ime卡住不再运行</p>
<p><img src="http://gtms03.alicdn.com/tps/i3/TB1WaXHKXXXXXb6XpXXeOeo8FXX-750-1000.jpg" alt=""></p>
<h3 id="reset-sh分析"><a href="#reset-sh分析" class="headerlink" title="reset.sh分析"></a>reset.sh分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">reset_android() &#123;</div><div class="line">    echo &quot;RESETTING ANDROID&quot;</div><div class="line">    require_java</div><div class="line">    echo &quot;* Configuring Android bootstrap&quot;</div><div class="line">    run_cmd rm -rf build/android_bootstrap</div><div class="line">    run_cmd &quot;$grunt&quot; configAndroidBootstrap</div><div class="line">    echo &quot;* Building Android bootstrap&quot;</div><div class="line">    run_cmd &quot;$grunt&quot; buildAndroidBootstrap</div><div class="line">    reset_unlock_apk</div><div class="line">    reset_unicode_ime</div><div class="line">    reset_settings_apk</div><div class="line">    if $include_dev ; then</div><div class="line">        reset_apidemos</div><div class="line">        reset_toggle_test</div><div class="line">        if $npmlink ; then</div><div class="line">            link_appium_adb</div><div class="line">        fi</div><div class="line">    fi</div><div class="line">    echo &quot;* Setting Android config to Appium&apos;s version&quot;</div><div class="line">    run_cmd &quot;$grunt&quot; setConfigVer:android</div><div class="line">    reset_chromedriver</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置Android bootstrap</p>
<ul>
<li>删除下build/android_bootstrap目录</li>
<li>执行grunt configAndroidBootstrap：配置UiAutomation需要的编译文件 appium/lib/devices/android/bootstrap/build.xml project.properties local.properties</li>
<li>生成AppiumBootstrap的编译文件：用于运行 android create uitest-project -n AppiumBootstrap -t android-19 -p xx/appium/lib/devices/android/bootstrap/</li>
</ul>
</li>
<li>编译 Android bootstrap<ul>
<li>grunt buildAndroidBootstrap：使用ant编译AppiumBootstrap.jar，放置到appium/build/android_bootstrap/下</li>
</ul>
</li>
<li>编译apk文件（build目录下）<ul>
<li>编译 unlock apk: 唤醒和解锁andorid手机或是虚拟器<a href="https://github.com/appium/unlock_apk" target="_blank" rel="external">详情</a></li>
<li>编译 unicode ime apk: android对ASCII码的支持不好，所以会安装这个utf7的输入法，将sendKeys中的输入转为unicode识别的编码，<a href="https://github.com/appium/io.appium.android.ime" target="_blank" rel="external">详情</a></li>
<li>编译 appium-settings apk:用于控制android系统 <a href="https://github.com/appium/io.appium.settings" target="_blank" rel="external">详情</a></li>
</ul>
</li>
<li>如果开启了测试模式 –dev参数<ul>
<li>编译sample-code下的app：ToggleTest apiDemos</li>
</ul>
</li>
<li>更新 appium-adb模块：运行./bin/npmlink.sh -l appium-adb</li>
<li>更新appium的版本号</li>
<li><p>reset_chromedriver 详情<a href="https://github.com/appium/appium-chromedriver" target="_blank" rel="external">参考</a></p>
<h3 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h3></li>
<li><p>node . -U  4df752b06833bfd3 （显示下面的提示证明Appium Server能够正常启动）</p>
</li>
<li>详细的运行参数<a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md" target="_blank" rel="external">参考</a></li>
<li>运行测试用例 : mocha wd-android-helloworld.js （<a href="https://github.com/admc/wd" target="_blank" rel="external">wd.js</a>）</li>
<li><p>其中支持原生的browser、chrome、还有apk的测试</p>
<p><img src="http://gtms04.alicdn.com/tps/i4/TB11TKIKXXXXXbaXXXX_k.yPXXX-795-103.jpg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wd = <span class="built_in">require</span>(<span class="string">"wd"</span>);</div><div class="line"><span class="keyword">var</span> driver = wd.promiseChainRemote(&#123;</div><div class="line">    <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">4723</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">driver</div><div class="line">    .init(&#123;</div><div class="line">        <span class="attr">browserName</span>: <span class="string">'Chrome'</span>,<span class="comment">//Chrome or Browser(原生，默认主页是google建议最好翻墙不然卡住)</span></div><div class="line">        platformName: <span class="string">'Android'</span>,</div><div class="line">        <span class="attr">platformVersion</span>: <span class="string">'4.4.4'</span>,</div><div class="line">        <span class="attr">deviceName</span>: <span class="string">'Android Emulator'</span></div><div class="line">      <span class="comment">//,app: '/Users/zhangmeng/Downloads/com.taobao.taobao-5.3.1-121.apk' //如果选择测试app的内容 browserName设置为'';</span></div><div class="line">      <span class="comment">//执行app后会把对应的apk安装到真机中</span></div><div class="line">    &#125;)</div><div class="line">    .get(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">    .sleep(<span class="number">5000</span>)</div><div class="line">    .title().then(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'this is the website title'</span>, title)</div><div class="line">    &#125;)</div><div class="line">    .quit()</div><div class="line">    .done();</div></pre></td></tr></table></figure>
<h2 id="ios-虚拟器配置"><a href="#ios-虚拟器配置" class="headerlink" title="ios 虚拟器配置"></a>ios 虚拟器配置</h2><h3 id="配置和启动服务"><a href="#配置和启动服务" class="headerlink" title="配置和启动服务"></a>配置和启动服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/appium/appium.git</div><div class="line">$ cd appium</div><div class="line">$ ./reset.sh --ios --verbose</div><div class="line">$ sudo ./bin/authorize-ios.js # for ios only 修改权限</div><div class="line">$ node .</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><p>参见 <a href="https://github.com/zhangmeng712/f2e-testing/blob/master/ui-wd-tests/mobile/safari-wd-search-test.js" target="_blank" rel="external">safari-wd-search-test.js</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/appium-from-source.md" target="_blank" rel="external">https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/appium-from-source.md</a></li>
<li><a href="https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/grunt.md" target="_blank" rel="external">https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/grunt.md</a></li>
<li><a href="http://university.utest.com/android-ui-testing-uiautomatorviewer-and-uiautomator/" target="_blank" rel="external">http://university.utest.com/android-ui-testing-uiautomatorviewer-and-uiautomator/</a></li>
<li><a href="http://developer.android.com/tools/help/shell.html" target="_blank" rel="external">http://developer.android.com/tools/help/shell.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Appium是现在比较活跃的开源自动化测试平台，因为更新速度很快，建议编译安装，了解其更多有意思的功能。&lt;br&gt;Appium支持ios android selendroid的自动化测试。在mac下配置ios环境还是相对简单的，但是android真机的配置就不是那么简单了，在
    
    </summary>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/categories/nodejs/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/nodejs/testing/"/>
    
    
      <category term="android" scheme="https://mengbaby.github.io/Mtags/android/"/>
    
      <category term="appium" scheme="https://mengbaby.github.io/Mtags/appium/"/>
    
      <category term="ios" scheme="https://mengbaby.github.io/Mtags/ios/"/>
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/Mtags/nodejs/"/>
    
      <category term="自动化测试" scheme="https://mengbaby.github.io/Mtags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试基础-mocha篇</title>
    <link href="https://mengbaby.github.io/2015/10/13/581/"/>
    <id>https://mengbaby.github.io/2015/10/13/581/</id>
    <published>2015-10-13T00:05:22.000Z</published>
    <updated>2017-04-17T07:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g mocha</div></pre></td></tr></table></figure>
<h2 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h2><p>常用的命令行为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha -u bdd -R spec -t 5000 --recursive</div></pre></td></tr></table></figure>
<ul>
<li>-u：测试方式 bdd|tdd|exports</li>
<li>-R：选择报表的展现方式，报表展现方式，默认为spec，附加的 例如mocha-lcov-reporter（需要自己安装）</li>
<li>-t：超时时间设置，当测试中有异步的时候如果超过设定时间会退出测试，默认2s</li>
<li>–recursive：默认会把test文件夹和子文件夹中的所有的测试文件执行一遍</li>
</ul>
<p>详解参考官网<a href="http://mochajs.org/#usage" targe="_blank" target="_blank" rel="external">Usage</a></p>
<h2 id="describe-it-hook"><a href="#describe-it-hook" class="headerlink" title="describe it hook"></a>describe it hook</h2><p>初次接触mocha的人，常常会觉得这几个概念很抽象,用简单的语言概括来说：</p>
<ul>
<li><p>describe:用于将测试分类，可以嵌套，范围从大到小</p>
</li>
<li><p>it：真正包裹测试断言的作用域</p>
</li>
<li><p>hook：before beforeEach after afterEach 为测试做辅助的作用域，例如 before中可以执行数据库的初始化，或者检测活动；after中用于清除使用的变量等。</p>
</li>
</ul>
<h2 id="mocha和BDD测试"><a href="#mocha和BDD测试" class="headerlink" title="mocha和BDD测试"></a>mocha和BDD测试</h2><p>mocha支持bdd和tdd的测试，支持should/expect的断言方式,常和<a href="http://chaijs.com/api/bdd/" target="_blank">chai</a>结合在一起使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//npm install chai之后</span></div><div class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">var</span> expect = chai.expect;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zhangmeng = <span class="keyword">new</span> Person(<span class="string">'zhangmeng'</span>);</div><div class="line"></div><div class="line">describe(<span class="string">'zhangmeng attribute'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    it (<span class="string">'zhangmeng should be a person '</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        expect(zhangmeng).to.be.an.instanceof(Person);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="异步的处理"><a href="#异步的处理" class="headerlink" title="异步的处理"></a>异步的处理</h2><p>在javascript的世界 测试异步程序是特别常见的，例如文件的读写、数据库的访问等等，mocha对异步的支持也特别好，你只需要在最里面的函数中增加对应的回调即可，此外mocha是支持promise的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @fileOverView mocha-async-demo</div><div class="line"> * @author zhangmeng on 15/10/12</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">//使用异步callback的方式</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> fileName = <span class="string">'/opt/local/share/nginx/html/my-git/f2e-testing/basic/files/name.json'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">var</span> expect = chai.expect;</div><div class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//使用回调的方式测试</span></div><div class="line"></div><div class="line">describe(<span class="string">'file content validation through callback'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//读取文件内容</span></div><div class="line">    <span class="keyword">var</span> fileObj = &#123;&#125;;</div><div class="line">    before(<span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">        <span class="comment">//async</span></div><div class="line">        fs.readFile(fileName, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                <span class="keyword">throw</span> err;</div><div class="line">            &#125;</div><div class="line">            fileObj = <span class="built_in">JSON</span>.parse(data);</div><div class="line">            done();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it (<span class="string">'expect name to be zhangmeng'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> name = fileObj.name;</div><div class="line">        expect(name).to.equal(<span class="string">"zhangmeng"</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it (<span class="string">'expect name to be zhangmeng'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> age = fileObj.age;</div><div class="line">        expect(age).to.equal(<span class="string">'29'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//使用promise的方式例子</span></div><div class="line">describe(<span class="string">'file content validation through promise'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fileObj = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> readFilePromise = <span class="function"><span class="keyword">function</span>(<span class="params">path, encoding</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> encoding = encoding || <span class="string">'utf-8'</span>;</div><div class="line">        <span class="keyword">var</span> deferred = Q.defer();</div><div class="line">        fs.readFile(path, encoding, <span class="function"><span class="keyword">function</span>(<span class="params">err, text</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(err) &#123;</div><div class="line">                deferred.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(err));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                deferred.resolve(text);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> deferred.promise;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    before(<span class="string">'read name.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//return 支持promise的异步</span></div><div class="line">        <span class="keyword">return</span> readFilePromise(fileName).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                fileObj = <span class="built_in">JSON</span>.parse(data);</div><div class="line">            &#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">                <span class="built_in">console</span>.log(err);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it (<span class="string">'name should be zhangmeng'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> name = fileObj.name;</div><div class="line">       expect(name).to.equal(<span class="string">'zhangmeng'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    it (<span class="string">'age should be 29'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> age = fileObj.age;</div><div class="line">        expect(age).to.equal(<span class="string">'29'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>关于it和hook之间的顺序，有时非常容易混淆，先上结论：</p>
<ul>
<li>beforeEach会对当前describe下的所有子case生效。</li>
<li>before和after的代码没有特殊顺序要求。</li>
<li>同一个describe下可以有多个before，执行顺序与代码顺序相同。</li>
<li>同一个describe下的执行顺序为before, beforeEach, afterEach, after（*），见下例。</li>
<li>当一个it有多个before的时候，执行顺序从最外围的describe的before开始，其余同理。</li>
<li>当没有it的时候，before还有beforeEach的内容都不会执行（*）</li>
<li>it的内容是按照顺序执行的 即使前面的it的内容完成的时间偏后，也会按照顺序执行（*）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">describe(<span class="string">'earth'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'see.. this function is run EACH time, before each describe()'</span>)</div><div class="line">    &#125;)</div><div class="line">    describe(<span class="string">'singapre'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'it will happen before beforeEach and only once'</span>)</div><div class="line">        &#125;)</div><div class="line">        it(<span class="string">'birds should fly'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/** ... */</span> &#125;)</div><div class="line">        it(<span class="string">'horse should gallop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/** ... */</span> &#125;)</div><div class="line">    &#125;)</div><div class="line">    describe(<span class="string">'malaysia'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        it(<span class="string">'birds should soar'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/** ... */</span> &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//执行结果</span></div><div class="line"><span class="comment">//earth</span></div><div class="line"><span class="comment">//singapre</span></div><div class="line"><span class="comment">//it will happen before beforeEach and only once</span></div><div class="line"><span class="comment">//see.. this function is run EACH time, before each describe()</span></div><div class="line"><span class="comment">//✓ birds should fly</span></div><div class="line"><span class="comment">//see.. this function is run EACH time, before each describe()</span></div><div class="line"><span class="comment">//✓ horse should gallop</span></div><div class="line"><span class="comment">//malaysia</span></div><div class="line"><span class="comment">//see.. this function is run EACH time, before each describe()</span></div><div class="line"><span class="comment">//✓ birds should soar</span></div></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><a href="https://github.com/zhangmeng712/f2e-testing/blob/master/basic/test/mocha-chai.js" target="_blank" rel="external">mocha与chai的结合</a></li>
<li><a href="https://github.com/zhangmeng712/f2e-testing/blob/master/basic/test/mocha-order.js" target="_blank" rel="external">mocha执行顺序</a></li>
<li><a href="https://github.com/zhangmeng712/f2e-testing/blob/master/basic/test/mocha-async-demo.js" target="_blank" rel="external">mocha的异步（callback和promise）</a></li>
<li><a href="https://github.com/strongloop/express/tree/master/test" target="_blank" rel="external">复杂的mocha应用-express</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="nodjs" scheme="https://mengbaby.github.io/categories/nodjs/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/nodjs/testing/"/>
    
    
      <category term="nodejs" scheme="https://mengbaby.github.io/Mtags/nodejs/"/>
    
      <category term="自动化测试" scheme="https://mengbaby.github.io/Mtags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="chai" scheme="https://mengbaby.github.io/Mtags/chai/"/>
    
      <category term="mocha" scheme="https://mengbaby.github.io/Mtags/mocha/"/>
    
      <category term="bdd" scheme="https://mengbaby.github.io/Mtags/bdd/"/>
    
      <category term="前端" scheme="https://mengbaby.github.io/Mtags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="异步" scheme="https://mengbaby.github.io/Mtags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>前端UI自动化测试</title>
    <link href="https://mengbaby.github.io/2015/10/08/571/"/>
    <id>https://mengbaby.github.io/2015/10/08/571/</id>
    <published>2015-10-07T22:41:01.000Z</published>
    <updated>2017-04-17T07:13:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试手段"><a href="#测试手段" class="headerlink" title="测试手段"></a>测试手段</h2><p>UI测试目前主要有方式：</p>
<ul>
<li>record-and-replay: 主要是指利用录制工具去记录用户的行为，并且把这种“行为“存储到脚本中，以便将来用于检测程序或应用是否能够产出预期的效果。常用的record-and-replay工具有：微软的RPF以及google早期出品的<a href="http://googletesting.blogspot.jp/2011/10/take-bite-out-of-bugs-and-redundant.html" target="_blank">abite</a>。</li>
<li>e2e测试(end-to-end testing)：这种测试方式不光可以测试UI层，还可以将整个系统的功能进行测试。通常这种测试会使用第三方的测试工具作为测试doubles层以提升测试效率。</li>
</ul>
<h2 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h2><p>没人可以否认<strong>UI测试是耗时且昂贵的</strong>，所以在写测试的时候一定要慎重的选择使用UI测试的case，下图就是一种比较“聪明”的UI测试架构。我们可以将UI层进行拆分：<strong>视图层</strong>还有<strong>UI逻辑层</strong>。如果大家知道  MVX 这种架构，就会知道，UI逻辑层更像是 MVX 中的Controller层和Model层，视图层是比较难以测试和描述的，因此不建议将对视图层的内容作为UI测试的重点，当然我们也可以使用简单的spec来描述视图层的内容，或是对于视图的样式等使用 <strong><a href="http://galenframework.com/" target="_blank">galenframework</a></strong>类似的框架进行测试 (后面的<a href="http://dj1211.com/?p=622" target="_blank">blog</a>会专门介绍这个框架，它脱离了<a href="https://github.com/Huddle/PhantomCSS" target="_blank">phantomCss</a>的检测方式，使用特殊的spec方式来描述case，对于前端来说，非常值得学习)。</p>
<p>因此我们更多的测试会围绕UI逻辑层进行。UI逻辑层主要的用途如下，因此我们的case就围绕着对这两部分功能的测试进行编写。</p>
<ul>
<li>用户和浏览器的交互(操作和更新html)</li>
<li>监听html的事件并且将信息通过request传递给后台</li>
</ul>
<p><img src="http://gtms01.alicdn.com/tps/i1/TB1EoZ_JpXXXXaSXVXXfGCCQVXX-512-362.jpg" width="500px" height="340px"></p>
<h2 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h2><p>UI测试框架主要由两部分构成：客户端的Test环境和测试服务，测试框架的基本原理很简单，本着经济有效的原则，设计了这款使用开源技术的UI测试框架，跨平台、支持多语言、且支持PC端和mobile端的测试方案，本人是前端，所以下例都是基于Nodejs/javascript书写。<br> <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms01.alicdn.com/tps/i1/TB14RaGJFXXXXcVXpXXYZLw5FXX-556-445.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="UI测试服务端的构建"><a href="#UI测试服务端的构建" class="headerlink" title="UI测试服务端的构建"></a>UI测试服务端的构建</h2><p>   对于UI测试的服务端平台来说，非常欣赏<a href="https://www.browserstack.com/" target="_blank">BrowserStack</a>这个测试平台。实时的、Web-based、多语言，多浏览器、多机型支持，API和接口全面丰富的基于云端的测试平台，除了价格比较贵（$39/month），绝对是最完的测试利器。<br>   对于UI测试来说，浏览器宿主环境是非常重要的，而服务端的Hub架构就是通过代理服务器的方式帮你操纵各种类型的浏览器进行自动化测试。在此我们选择了selenium-standalone来实现pc端的server(内置Jetty服务器)；appium这个node服务器作为mobile端的server hub。</p>
<h3 id="Selenium-standalone"><a href="#Selenium-standalone" class="headerlink" title="Selenium-standalone"></a>Selenium-standalone</h3><p>   <a href="https://www.npmjs.com/package/selenium-standalone" target="_blank" rel="external">selenium-standalone</a>支持node安装方式,通过下列脚本可以安装执行，同时可以配置对应的hub信息。</p>
<ul>
<li>npm install selenium-standalone@latest -g</li>
<li>selenium-standalone start – -role node -hub <a href="http://localhost:4444/grid/register" target="_blank" rel="external">http://localhost:4444/grid/register</a> -port 5556</li>
</ul>
<ul>
<li>selenium默认支持的浏览器为Firefox和phantom，如果要使用它操纵其他的浏览器参考如下方式安装对应驱动：</li>
<li>chrome:selenium-standalone install –drivers.chrome.version=2.15 –drivers.chrome.baseURL=<a href="http://chromedriver.storage.googleapis.com" target="_blank" rel="external">http://chromedriver.storage.googleapis.com</a></li>
<li>safari：下载，并在safari中安装<a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank">SafariDriver.safariextz</a>插件</li>
<li>ie：selenium-standalone install –drivers.chrome.version=2.15 –drivers.chrome.baseURL=<a href="http://chromedriver.storage.googleapis.com" target="_blank" rel="external">http://chromedriver.storage.googleapis.com</a></li>
</ul>
<h3 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h3><p>####简介<br>mobile端的开发越来越火热，为了保证开发质量，也有很多针对移动端的测试工具应运而生。<a href="http://appium.io" target="_blank">Appium</a>就是其中很活跃的开源框架。本质上它包括两部分内容：</p>
<ul>
<li>基于express的server用于发送/接收client端的协议命令</li>
<li>作为bootstrap客户端用于将命令传递给对应的UIAutomator/UIAutomation/Google’s Instrumentation</li>
</ul>
<p>Appium最大的特色就是<strong>支持ios/android/firefoxos多种平台的测试，native、h5、hybrid都支持，以及所有支持jsonWireProtocal协议的脚本语言：python，java，nodejs ruby都可以用来书写用例</strong>。</p>
<p>####安装</p>
<p>因为Appium的社区发展的很快，建议使用源码编译使用，而不是使用AppiumGUI(它本身是由第三方社区维护，并不属于appium的核心产品 所以很多bug更新的并不及时，例如测试h5页面的时候页面会出现)，此外还可以根据自己的要求修改源码和调试，下面就简要介绍一下源码安装的方法, 安装详细方法 请见 <a href="https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/appium-from-source.md" target="_blank">Running Appium from Source</a>：</p>
<ul>
<li>配置IOS环境<ul>
<li>xcode安装好</li>
</ul>
</li>
<li>配置Andorid环境<ul>
<li>java jdk 配置好并设置好JAVA_HOME</li>
<li>android sdk安装并配置好ANDROID_HOME</li>
<li>建议在真机下进行测试（模拟器启动速度慢），参见<a href="https://nishantverma.gitbooks.io/appium-for-android/content/executing_test_on_real_devices/index.html" target="_blank">executing_test_on_real_devices</a></li>
</ul>
</li>
<li>运行下方代码</li>
<li>以IOS为例：编译安装并启动的结果如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/appium/appium.git</div><div class="line">   cd appium</div><div class="line">   ./reset.sh --verbose #感谢g*f*w 安装过程痛苦而漫长，使用--verbose显示日志吧，至少知道在哪里卡住</div><div class="line">   sudo ./bin/authorize-ios.js # for ios only modify /etc/authorization</div><div class="line">   node .</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms04.alicdn.com/tps/i4/TB1KqblJFXXXXcwXXXX2UFe5FXX-648-102.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果需要详细的server启动配置，请参考<a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md" target="_blank">Appium server arguments</a>，例如 只想实现针对safari进行h5页面的自动化测试，配置参数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node . --safari</div></pre></td></tr></table></figure>
<h2 id="UI测试客户端框架"><a href="#UI测试客户端框架" class="headerlink" title="UI测试客户端框架"></a>UI测试客户端框架</h2><p>前面提到了<a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol" target="_blank">jsonWireProtcal</a>协议，主要用于客户端的Testcase中定义对浏览器的操作，实现了这个协议的框架和语言有很多，这个大家自行选择。协议形如</p>
<p>GET /session/:sessionId/screenshot<br>Take a screenshot of the current page.</p>
<p>个人比较欣赏<a href="https://www.npmjs.com/package/wd" target="_blank">wd.js</a>这个框架，它是一个webdriver/selenium 2的node端实现，各种异步promise支持，自定义方法非常方便，同时支持mocha和chai的无缝嵌入。</p>
<h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><ul>
<li>安装依赖</li>
<li>配置desirecapabilities,<a href="https://code.google.com/p/selenium/wiki/DesiredCapabilities" target="_blank">详细参数</a></li>
<li>操纵浏览器，API参加 <a href="https://github.com/admc/wd/blob/master/doc/api.md" target="_blank" rel="external">API列表</a></li>
<li>详细代码参见<a href="https://github.com/zhangmeng712/f2e-testing/blob/master/ui-wd-tests/wd-helloword.js" target="_blank">github</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wd = <span class="built_in">require</span>(<span class="string">"wd"</span>);</div><div class="line"><span class="keyword">var</span> driver = wd.promiseChainRemote(&#123;</div><div class="line">    <span class="attr">protocol</span>: <span class="string">'http:'</span>,</div><div class="line">    <span class="attr">hostname</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="string">'4444'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/wd/hub'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">driver</div><div class="line">    .init(&#123;<span class="attr">browserName</span>: <span class="string">'safari'</span>&#125;)</div><div class="line">    .get(<span class="string">'http://www.baidu.com'</span>)</div><div class="line">    .sleep(<span class="number">5000</span>)</div><div class="line">    .title().then(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'this is the website title'</span>, title)</div><div class="line">    &#125;)</div><div class="line">    .quit();</div></pre></td></tr></table></figure>
<h3 id="chain和promise的写法"><a href="#chain和promise的写法" class="headerlink" title="chain和promise的写法"></a>chain和promise的写法</h3><p>将异步转化为Q chain的链式调用方式，内置<a href="http://documentup.com/kriskowal/q/" target="_blank">Q</a><br>支持自定义的promise,代码如下所示，详细代码见<a href="https://github.com/zhangmeng712/f2e-testing/blob/master/ui-wd-tests/wd-promise.js" target="_blank">github</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @fileOverView wd-promise wd 链式调用实例</div><div class="line"> * @author zhangmeng on 15/10/4</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">var</span> wd = <span class="built_in">require</span>(<span class="string">"wd"</span>);</div><div class="line"><span class="comment">//内置Q chain</span></div><div class="line"><span class="keyword">var</span> Q = wd.Q;</div><div class="line"><span class="keyword">var</span> browser = wd.promiseChainRemote(&#123;</div><div class="line">    <span class="attr">protocol</span>: <span class="string">'http:'</span>,</div><div class="line">    <span class="attr">hostname</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="string">'4444'</span>,</div><div class="line">    <span class="attr">path</span>: <span class="string">'/wd/hub'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义链式调用用于实现drag 和 drop的操作</div><div class="line"> * @param fromElm cssSelector</div><div class="line"> * @param toElm cssSelector</div><div class="line"> * @returns &#123;Function&#125; browser</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> dragNdrop = <span class="function"><span class="keyword">function</span> (<span class="params">fromElm, toElm</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> Q.all([</div><div class="line">            browser.elementByCssSelector(fromElm),</div><div class="line">            browser.elementByCssSelector(toElm)</div><div class="line">        ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">els</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(els);</div><div class="line">            <span class="keyword">return</span> browser</div><div class="line">                    .moveTo(els[<span class="number">0</span>])</div><div class="line">                    .buttonDown()</div><div class="line">                    .moveTo(els[<span class="number">1</span>])</div><div class="line">                    .buttonUp();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">browser</div><div class="line">    .init(&#123;<span class="attr">browserName</span>:<span class="string">'chrome'</span>&#125;)</div><div class="line">    .get(<span class="string">'http://localhost:63342/my-git/f2e-testing/ui-wd-tests/test-html/test-dragNdrop.html'</span>)</div><div class="line">    <span class="comment">//chain link</span></div><div class="line">    .then(dragNdrop(<span class="string">'.dragable'</span>,<span class="string">'.dropable'</span>))</div><div class="line">    .sleep(<span class="number">1000</span>)</div><div class="line">    .fin(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> browser.quit(); &#125;)</div><div class="line">    .done();</div></pre></td></tr></table></figure>
<h3 id="Asserter用法和自定义Asseter"><a href="#Asserter用法和自定义Asseter" class="headerlink" title="Asserter用法和自定义Asseter"></a>Asserter用法和自定义Asseter</h3><p>wd.js内置了基本的Asserter，同时支持自定义的断言。多数结合waitfor“句式“使用。这个在实际中经常应用，例如当页面中某个元素出现特定状态的时候去做某事，或者是判断某异步的加载完成的时候执行某操作等。</p>
<p>内置的判断包括</p>
<ul>
<li>nonEmptyText</li>
<li>isDisplayed</li>
<li>isNotDisplayed</li>
<li>textInclude</li>
<li>jsCondition</li>
<li>isVisible</li>
<li>isHidden</li>
<li>jsCondition(常用)</li>
</ul>
<p>waitfor包括：</p>
<ul>
<li>waitFor</li>
<li>waitForElementByCss(elem, asserter, timeout, pollFreq, callback)（常用,判定当某元素存在，且满足某asserter的时候调用回调）</li>
<li>waitForConditionInBrowser(jsExpression) 需要设置异步超时时间，setAsyncScriptTimeout</li>
</ul>
<p>如果上述都不满足还可以自定义Asserter，下面是对应的例子，使用多种方法判断ajax加载完成后进行测试内容，详情见<a href="https://github.com/zhangmeng712/f2e-testing/blob/master/ui-wd-tests/wd-assert.js" target="_blank">wd-asserter.js</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义方法</span></div><div class="line"><span class="keyword">var</span> tableHasBeenLoaded = <span class="keyword">new</span> Asserter(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">browser, cb</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> jsConditionExpr = <span class="string">'($("#tbody tr").length &gt; 0) ? true: false'</span>;</div><div class="line">        <span class="keyword">var</span> _eval = browser.eval;</div><div class="line">        _eval.apply( browser , [jsConditionExpr, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(err) &#123;<span class="keyword">return</span> cb(err);&#125;</div><div class="line">            cb(<span class="literal">null</span>, res, res);</div><div class="line">        &#125;]);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line">browser</div><div class="line">    .init(&#123;<span class="attr">browserName</span>: <span class="string">'chrome'</span>&#125;)</div><div class="line">    .setAsyncScriptTimeout(<span class="number">30000</span>)</div><div class="line">    .get(<span class="string">'http://localhost:63342/my-git/f2e-testing/ui-wd-tests/test-html/test-assert.html'</span>)</div><div class="line">    <span class="comment">//------------- case2 jsCondition  waitForConditionInBrowser new Asserter waitForAjaxLoaded -----</span></div><div class="line">    .elementByCss(<span class="string">'#getBtn'</span>)</div><div class="line">    .click() <span class="comment">//click to trigger ajaxloading</span></div><div class="line">    <span class="comment">//.waitFor(tableHasBeenLoaded, 4000)</span></div><div class="line">    .execute(<span class="string">'alert("ajax finished")'</span>)</div><div class="line">    .sleep(<span class="number">2000</span>)</div><div class="line">    .fin(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> browser.quit();</div><div class="line">    &#125;)</div><div class="line">    .done();</div></pre></td></tr></table></figure>
<h3 id="自定义操作方法"><a href="#自定义操作方法" class="headerlink" title="自定义操作方法"></a>自定义操作方法</h3><p>使用wd.PromiseChainWebdriver.prototype可以将自定义的方法chain到链式调用中去，同时还可以使用promise来实现，例如上面dragNdrop的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//method1 of self-defined method</span></div><div class="line">wd.PromiseChainWebdriver.prototype.waitForAjaxLoaded = <span class="function"><span class="keyword">function</span> (<span class="params">timeout</span>) </span>&#123;</div><div class="line">	<span class="comment">//this为browser内容</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.waitFor(tableHasBeenLoaded, timeout)</div><div class="line">&#125;</div><div class="line"><span class="comment">//method2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selfDefinedFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> browser.xxxxx</div><div class="line">&#125;</div><div class="line"></div><div class="line">browser.init().get().selfDefinedFunction().xx</div></pre></td></tr></table></figure>
<h3 id="插入js代码"><a href="#插入js代码" class="headerlink" title="插入js代码"></a>插入js代码</h3><p>在测试的实际应用中，经常需要引入需要的类库或者辅助代码来实现测试的目的，那么应该怎么操作呢，wd.js按照jsonWireProtocal是支持执行js代码的，一般通过下面两个方法。最常见的是要测的代码中是没有对应的类库的 如果要使用，例如jquery kissy，那么需要预先inject对应的代码，类似js bookmark书签，或者chrome的插件中的content_script代码。具体代码参见<a href="https://github.com/zhangmeng712/f2e-testing/blob/master/ui-wd-tests/wd-jsInject.js" target="_blank">wd-jsinject.js</a></p>
<ul>
<li>execute()：执行同步代码</li>
<li>executeAsync()：执行的内容中含有异步的内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//load.js 用于load javascript类库</span></div><div class="line"><span class="keyword">var</span> loadScript = <span class="function"><span class="keyword">function</span> (<span class="params">scriptUrl, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> done = <span class="literal">false</span>;</div><div class="line">    script.onload = script.onreadystatechange = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!done &amp;&amp; (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState == <span class="string">'loaded'</span></div><div class="line">            || <span class="keyword">this</span>.readyState == <span class="string">'complete'</span>)) &#123;</div><div class="line">            done = <span class="literal">true</span>;</div><div class="line">            script.onload = script.onreadystatechange = <span class="literal">null</span>;</div><div class="line">            head.removeChild(script);</div><div class="line">            callback();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    script.src = scriptUrl;</div><div class="line">    head.appendChild(script);</div><div class="line">&#125;;</div><div class="line">loadScript = loadScript(<span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length - <span class="number">1</span>]);</div><div class="line"><span class="comment">//loadScript('//cdn.bootcss.com/jquery/2.1.4/jquery.js');</span></div><div class="line"></div><div class="line"><span class="comment">//dom.js 判断类库是否正确引入，设置</span></div><div class="line">Fn = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> appendChild = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#i_am_an_id"</span>).append(<span class="string">'&lt;div class="child"&gt;I am the child&lt;/div&gt;'</span>)</div><div class="line">&#125;, <span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> removeChildren = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#i_am_an_id"</span>).empty();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Fn = &#123;</div><div class="line">    <span class="attr">appendChild</span>: appendChild,</div><div class="line">    <span class="attr">removeChildren</span>: removeChildren</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//定义object方便链式操作中调用</span></div><div class="line"><span class="built_in">window</span>.Fn = Fn;</div><div class="line"></div><div class="line"><span class="comment">//wd-jsInject.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> jsFileToString = <span class="function"><span class="keyword">function</span> (<span class="params">filePath</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = fs.readFileSync(filePath, <span class="string">"utf8"</span>);</div><div class="line">    <span class="keyword">return</span> file;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//读取本地的代码</span></div><div class="line"><span class="keyword">var</span> codeUrl = <span class="string">'/opt/local/share/nginx/html/my-git/f2e-testing/ui-wd-tests/scripts/dom.js'</span>;</div><div class="line"><span class="comment">//加载jquery等类库</span></div><div class="line"><span class="keyword">var</span> loadUrl = <span class="string">'/opt/local/share/nginx/html/my-git/f2e-testing/ui-wd-tests/scripts/load.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">//读取js代码（自动转化为jsExpression）</span></div><div class="line"><span class="keyword">var</span> executeStr = jsFileToString(codeUrl);</div><div class="line"><span class="keyword">var</span> loadScriptStr = jsFileToString(loadUrl);</div><div class="line"></div><div class="line">browser</div><div class="line">      .init(&#123;<span class="attr">browserName</span>:<span class="string">'chrome'</span>&#125;)</div><div class="line">      .get(<span class="string">'http://localhost:63342/my-git/f2e-testing/ui-wd-tests/test-html/test-injectjs.html'</span>)</div><div class="line">      <span class="comment">//inject jquery</span></div><div class="line">      .setAsyncScriptTimeout(<span class="number">30000</span>)</div><div class="line">      .executeAsync(loadScriptStr, [<span class="string">"//cdn.bootcss.com/jquery/2.1.4/jquery.js"</span>])</div><div class="line">      .execute(executeStr)</div><div class="line">      <span class="comment">//测试jquery是否正常引入</span></div><div class="line">      .execute(<span class="string">'Fn.appendChild'</span>, [<span class="number">1000</span>])</div><div class="line">      .execute(<span class="string">'Fn.removeChildren()'</span>)</div><div class="line">      .sleep(<span class="number">2000</span>)</div><div class="line">      .fin(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> browser.quit(); &#125;)</div><div class="line">      .done();</div></pre></td></tr></table></figure>
<h3 id="结合mocha和chai"><a href="#结合mocha和chai" class="headerlink" title="结合mocha和chai"></a>结合mocha和chai</h3><p><a href="https://mochajs.org/" target="_blank">mocha</a>是用于测试的框架，chai用于辅助断言，wd.js支持两者的无缝接入，可以使ui测试变得像单元测试一样简单。参考下面的demo，就是把三者结合在一起，通过wd对appium访问ios虚拟机，对手机淘宝搜索结果页进行UI测试的例子，代码详见<a href="https://github.com/zhangmeng712/f2e-testing/blob/master/ui-wd-tests/mobile/safari-wd-search-test.js" target="_blank">Github F2E-testing UI test</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'../helpers/setup'</span>);</div><div class="line"><span class="keyword">var</span> wd = <span class="built_in">require</span>(<span class="string">"wd"</span>);</div><div class="line"><span class="keyword">var</span> serverConfig = <span class="built_in">require</span>(<span class="string">'../helpers/server'</span>).appium;</div><div class="line"><span class="keyword">var</span> desired = <span class="built_in">require</span>(<span class="string">'../helpers/caps'</span>).ios90s;</div><div class="line"><span class="keyword">var</span> begin_page_url = <span class="string">'http://s.m.taobao.com/h5?search-btn=&amp;event_submit_do_new_search_auction=1&amp;_input_charset=utf-8&amp;topSearch=1&amp;atype=b&amp;searchfrom=1&amp;action=home%3Aredirect_app_action&amp;from=1'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'test page of taobao search'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.timeout(<span class="number">300000</span>);</div><div class="line">    <span class="keyword">var</span> driver;</div><div class="line">    before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        driver = wd.promiseChainRemote(serverConfig);</div><div class="line">        <span class="built_in">require</span>(<span class="string">"../helpers/logger"</span>).configure(driver);<span class="comment">//显示日志</span></div><div class="line">        <span class="keyword">return</span> driver.init(desired);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> driver.quit();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//1打开淘宝搜索页面</span></div><div class="line">    <span class="comment">//2点击搜索框</span></div><div class="line">    <span class="comment">//3进入到搜索结果页面</span></div><div class="line">    it(<span class="string">"should open iphone+6s search page"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> inputValue = <span class="string">'iphone 6s'</span>;</div><div class="line">        <span class="keyword">return</span> driver</div><div class="line">              .get(begin_page_url)</div><div class="line">              .sleep(<span class="number">1000</span>)</div><div class="line">              .waitForElementByName(<span class="string">'q'</span>, <span class="number">2000</span>)</div><div class="line">              .sendKeys(inputValue)</div><div class="line">              .waitForElementByName(<span class="string">'search'</span>)</div><div class="line">              .tap()</div><div class="line">              .sleep(<span class="number">5000</span>)</div><div class="line">              .eval(<span class="string">'window.location.href'</span>)</div><div class="line">              .should.eventually.include(<span class="string">'q=iphone+6s'</span>)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms01.alicdn.com/tps/i1/TB16UnuJFXXXXXbXFXXMWa1RFXX-376-688.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gtms02.alicdn.com/tps/i2/TB1lbDlJFXXXXXBXVXXXiF3VFXX-1379-584.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试手段&quot;&gt;&lt;a href=&quot;#测试手段&quot; class=&quot;headerlink&quot; title=&quot;测试手段&quot;&gt;&lt;/a&gt;测试手段&lt;/h2&gt;&lt;p&gt;UI测试目前主要有方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;record-and-replay: 主要是指利用录制工具去记录用户的行
    
    </summary>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/categories/nodejs/"/>
    
      <category term="testing" scheme="https://mengbaby.github.io/categories/nodejs/testing/"/>
    
    
      <category term="appium" scheme="https://mengbaby.github.io/Mtags/appium/"/>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/Mtags/nodejs/"/>
    
      <category term="自动化测试" scheme="https://mengbaby.github.io/Mtags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="前端" scheme="https://mengbaby.github.io/Mtags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="selenium" scheme="https://mengbaby.github.io/Mtags/selenium/"/>
    
      <category term="UI" scheme="https://mengbaby.github.io/Mtags/UI/"/>
    
      <category term="wd.js" scheme="https://mengbaby.github.io/Mtags/wd-js/"/>
    
      <category term="webdriver" scheme="https://mengbaby.github.io/Mtags/webdriver/"/>
    
  </entry>
  
  <entry>
    <title>browserify和webpack快速配置入门教程</title>
    <link href="https://mengbaby.github.io/2015/09/21/556/"/>
    <id>https://mengbaby.github.io/2015/09/21/556/</id>
    <published>2015-09-21T01:04:12.000Z</published>
    <updated>2017-04-17T06:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着前端的工程越来越复杂，快速的模块化构建、部署前端app也就变得更加的重要，最近比较火爆的工具有browserify和webpack。真的是非常好用，本文的目的就是教会大家怎么使用这两个工具，因为强大所以配置也非常复杂，但是我们常用的核心功能非常简单，下面我们就从实战的角度，告诉大家怎么能用其快速的构建应用，本文中的打包代码基本是 即拷贝即用。</p>
<h2 id="browserify"><a href="#browserify" class="headerlink" title="browserify"></a>browserify</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://browserify.org/" target="_blank" rel="external">browserify</a> 简单概括来说就是：按照依赖(require)打包你的js文件。并让它(node端代码)跑在浏览器环境下。<br>浏览器兼容程度如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://browserify.org/images/testling_badge.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="快速使用方法"><a href="#快速使用方法" class="headerlink" title="快速使用方法"></a>快速使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g browserify</div><div class="line">browserify main.js -o bundle.js</div></pre></td></tr></table></figure>
<p>假设main.js是你的node模块代码，且main.js依赖了 basicA.js basicB.js。你可以通过上述命令快速的产出bundle.js文件，在浏览器端使用<script src="bundle.js"></script>，在bundle.js中会实现如下功能，所以最终代码就直接引用bundle.js即可。</p>
<ul>
<li>增加对node的require和exports的支持，使得main.js的内容能够在浏览器端执行</li>
<li>分析出main.js的依赖模块basicA.js basicB.js并将其打包在bundle.js中</li>
<li>上述只是最简单的使用方法，详情请参考 <a href="https://github.com/substack/browserify-handbook" target="_blank" rel="external">browserify-handbook</a></li>
</ul>
<h3 id="gruntfile版本react工程最简配置（支持文件修改自动部署）"><a href="#gruntfile版本react工程最简配置（支持文件修改自动部署）" class="headerlink" title="gruntfile版本react工程最简配置（支持文件修改自动部署）"></a>gruntfile版本react工程最简配置（支持文件修改自动部署）</h3><p>我们知道react是支持使用node模块和页面内嵌jsx,但是一般来说，react应用还是需要打包的步骤，将jsx的语法解析成对应的js执行。browsify支持react项目的打包，只需要引入对应的<a href="https://github.com/andreypopp/reactify" target="_blank" rel="external">reactify</a> 插件即可。最简单的配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"react-app"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"^0.4.5"</span>,</div><div class="line">    <span class="string">"grunt-browserify"</span>: <span class="string">"^3.3.0"</span>,</div><div class="line">    <span class="string">"grunt-contrib-watch"</span>: <span class="string">"^0.6.1"</span>,</div><div class="line">    <span class="string">"reactify"</span>: <span class="string">"^1.0.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//gruntfile文件配置</span></div><div class="line"><span class="comment">//其中所有的jsx组件放到src下，而最终的入口文件为app.js</span></div><div class="line"><span class="comment">//开发的时候执行grunt watch就可以监控src中所有jsx模板将其翻译成对应的js模块，在最终的html中引入bundle.js即可</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    <span class="attr">pkg</span>: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">      <span class="attr">browserify</span>: &#123;</div><div class="line">        <span class="attr">files</span>: [<span class="string">'src/**/*.js*'</span>, <span class="string">'app.js'</span>],</div><div class="line">        <span class="attr">tasks</span>: [<span class="string">'browserify'</span>]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">browserify</span>: &#123;</div><div class="line">      <span class="attr">example</span> : &#123;</div><div class="line">        <span class="attr">src</span>: [<span class="string">'app.js'</span>],</div><div class="line">        <span class="attr">dest</span>: <span class="string">'bundle.js'</span>,</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">          <span class="attr">transform</span>: [<span class="string">'reactify'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-browserify'</span>);</div><div class="line">  grunt.registerTask(<span class="string">'bundle-example'</span>, [<span class="string">'browserify:example'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a> 也是一个强大的模块管理工具，它将所有的资源都算作一个模块，如下图。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://cdn2.infoqstatic.com/statics_s1_20150616-0050/resource/articles/react-and-webpack/zh/resources/0602005.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>和前面提到的browsify相比，browsify只是支持js的打包，webpack更加的智能，主要体现：</p>
<ul>
<li>支持CommonJs和AMD模块。</li>
<li>支持模块加载器和插件机制，可对模块灵活定制，比如babel-loader加载器，有效支持ES6。</li>
<li>可以通过配置，打包成多个文件。有效利用浏览器的缓存功能提升性能。</li>
<li>将样式文件和图片等静态资源也可视为模块进行打包。配合loader加载器，可以支持sass，less等CSS预处理器。</li>
<li>内置有source map，即使打包在一起依旧方便调试。</li>
</ul>
<h3 id="快速使用方法-1"><a href="#快速使用方法-1" class="headerlink" title="快速使用方法"></a>快速使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div><div class="line">##支持的命令行参数有:-d:支持调试；-w支持实时的编辑打包；-p支持压缩</div><div class="line">webpack -d</div><div class="line">webpack -w</div><div class="line">webpack -p</div></pre></td></tr></table></figure>
<p>webpack的默认文件名为：webpack.config.js，下面就介绍一个简单的工程所使用的webpack配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//单入口文件的打包</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./src/search.js'</span>, <span class="comment">//单入口文件</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">'out'</span>),  <span class="comment">//打包输出的路径</span></div><div class="line">        filename: <span class="string">'bundle.js'</span>,              <span class="comment">//打包后的名字</span></div><div class="line">        publicPath: <span class="string">"./out/"</span>                <span class="comment">//html引用路径，在这里是本地地址。</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//多入口文件</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">bundle_page1</span>: <span class="string">"./src/search.js"</span>,</div><div class="line">        <span class="attr">bundle_page2</span>: <span class="string">"./src/login.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">'out'</span>),</div><div class="line">        <span class="attr">publicPath</span>: <span class="string">"./out/"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'[name].js'</span><span class="comment">//最后产出的文件为 out/bundle_page1.js out/bundle_page2.js</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="webpack加载器和插件"><a href="#webpack加载器和插件" class="headerlink" title="webpack加载器和插件"></a>webpack加载器和插件</h3><p>webpack最大的特色就是支持很多的<a href="http://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">loader</a>，这些loader为复杂的应用构建提供了便利的部署环境，而不仅仅局限于node文件的浏览器环境打包而已。常用的加载器有哪些呢，这里会介绍这几个的用法。</p>
<ul>
<li><a href="https://github.com/babel/babel-loader" target="_blank" rel="external">babel-loader</a>：不仅可以做ES6-ES5的loader还可以用来实现jsx的编译</li>
<li><a href="https://github.com/webpack/less-loader" target="_blank" rel="external">less-loader</a>:用于将less编译成对应的css</li>
<li><a href="https://github.com/webpack/css-loader" target="_blank" rel="external">css-loader</a>：加载css文件</li>
<li><a href="https://github.com/webpack/style-loader" target="_blank" rel="external">style-loader</a>：转化成内置的<style>样式。上面三个常常一起使用，style!css!less，loader之间用!连接。在项目中直接 require(‘xxx.less’)即可</li>
<li><a href="https://github.com/webpack/json-loader">json-loader</a></li>
<li><a href="">url-loader</a>image sprite 的替代方案，会将制定的图片文件合并加载，有limit参数</li>
<li><a href="https://github.com/webpack/extract-text-webpack-plugin">extract-text-webpack-plugin</a>:项目中如果不采用按需加载，而是要将所有的css打包成一个文件，并使用link加载，这个插件就有所帮助了。</li>
</ul>
<h3 id="webpack实战一个工程配置"><a href="#webpack实战一个工程配置" class="headerlink" title="webpack实战一个工程配置"></a>webpack实战一个工程配置</h3><p>有了上述的loader，我们就可以做很多的项目配置了，假设我们有个实际的项目, 基本的操作都包括如下这些环节，我们该如何使用webpack实现这个功能配置呢？</p>
<ul>
<li>JS编译与加载：loader + react模板开发</li>
<li>CSS编译与加载：less编译</li>
<li>JS与CSS压缩</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"order-view"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"less-loader"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"css-loader"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"style-loader"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"autoprefixer-loader"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"extract-text-webpack-plugin"</span>:<span class="string">""</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="comment">// 执行webpack -p即可完成压缩</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//多文件入口</span></div><div class="line">    entry: &#123;</div><div class="line">        <span class="attr">bundle_page1</span>: <span class="string">"./src/search.js"</span>,</div><div class="line">        <span class="attr">bundle_page2</span>: <span class="string">"./src/login.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//指定文件的输出</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">'out'</span>),</div><div class="line">        <span class="attr">publicPath</span>: <span class="string">"./out/"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            <span class="comment">//处理react模板的配置</span></div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/.jsx?$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">'babel'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//生成内置的样式&amp;lt;style&amp;gt;</span></div><div class="line">            <span class="comment">//&#123;</span></div><div class="line">            <span class="comment">//    test: /.less$/,</span></div><div class="line">            <span class="comment">//    exclude: /(node_modules|bower_components)/,</span></div><div class="line">            <span class="comment">//    loader: "style!css!less"</span></div><div class="line">            <span class="comment">//&#125;,</span></div><div class="line">            <span class="comment">//将依赖打包成一个css文件</span></div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/.less$/</span>,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/.less$/</span>,</div><div class="line">                <span class="attr">loader</span>: ExtractTextPlugin.extract(</div><div class="line">                    <span class="string">'css?sourceMap&amp;amp;-minimize!'</span> + <span class="string">'autoprefixer-loader!'</span> + <span class="string">'less?sourceMap'</span></div><div class="line">                )</div><div class="line"></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//图片自动合并加载</span></div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/.(jpg|png)$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"url?limit=8192"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</style></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着前端的工程越来越复杂，快速的模块化构建、部署前端app也就变得更加的重要，最近比较火爆的工具有browserify和webpack。真的是非常好用，本文的目的就是教会大家怎么使用这两个工具，因为强大所以配置也非常复杂，但是我们常用的核心功能非常简单，下面我们就从实战的角
    
    </summary>
    
      <category term="javascript" scheme="https://mengbaby.github.io/categories/javascript/"/>
    
      <category term="workflow" scheme="https://mengbaby.github.io/categories/javascript/workflow/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="nodejs" scheme="https://mengbaby.github.io/Mtags/nodejs/"/>
    
      <category term="browserify" scheme="https://mengbaby.github.io/Mtags/browserify/"/>
    
      <category term="webpack" scheme="https://mengbaby.github.io/Mtags/webpack/"/>
    
      <category term="前端自动化部署" scheme="https://mengbaby.github.io/Mtags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
      <category term="工具" scheme="https://mengbaby.github.io/Mtags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="敏捷开发" scheme="https://mengbaby.github.io/Mtags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>React生命周期、API和深入用法</title>
    <link href="https://mengbaby.github.io/2015/09/06/450/"/>
    <id>https://mengbaby.github.io/2015/09/06/450/</id>
    <published>2015-09-06T03:04:22.000Z</published>
    <updated>2017-04-17T07:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>React火了很久了，一直都停留在照葫芦画瓢按照example凑数的基础上，但是如果真的要了解一个框架，它的生命周期和核心API是最重要的部分了，下面我们就来聊聊React的生命周期、核心API的用法以及React工具集，在使用React进行深度开发的时候，一定会事半功倍。本文假设你已经了解了React的基本开发知识，如果不了解，强烈推荐阮老师的这篇<a target="_blank" href="http://www.ruanyifeng.com/blog/2015/03/react.html">《React 入门实例教程》</a></p>
<h2 id="一、生命周期"><a href="#一、生命周期" class="headerlink" title="一、生命周期"></a>一、生命周期</h2><p><img src="https://pbs.twimg.com/media/B-G3_T8CcAAmTHV.jpg:large" width="650px" height="500px"></p>
<h3 id="1、创建一个类和实例化的基础方法"><a href="#1、创建一个类和实例化的基础方法" class="headerlink" title="1、创建一个类和实例化的基础方法"></a>1、创建一个类和实例化的基础方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//创建组件类</span></div><div class="line"><span class="keyword">var</span> ComponentBox = React.createClass(&#123;</div><div class="line">    <span class="comment">//other lifecycle method</span></div><div class="line">	render:  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//return JSX code</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//实例化组件</span></div><div class="line"><span class="keyword">var</span> compInstance = React.render(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">ComponentBox</span> /&gt;</span>,</span></div><div class="line">     document.getElementById('content') //DOM Element</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="2、了解this-state和this-prop"><a href="#2、了解this-state和this-prop" class="headerlink" title="2、了解this.state和this.prop"></a>2、了解this.state和this.prop</h3><p>使用过React的人都会知道它有两个属性，state还有props，他们两者都可以作为render中的data输入源，那两者的区别、联系以及正确的用法又是怎么样的呢。参见这篇<a href="https://github.com/uberVU/react-guide/blob/master/props-vs-state.md" target="_blank">《props-vs-state》</a> 。</p>
<ul>
<li>prop是组件的配置项，是可选的，当组件接收这个参数后它就是不变的。组件改变不了它的props，父组件的props还担当着收集子组件配置项的功能。</li>
<li>state，在组件初始化的时候会赋予state初始的状态，当组件的状态发生变化的时候，组件内部自行管理着state的变化，所以state可以说是组件的私有值。state参数是可有可无的，但当你的组件是“Stateful Component”的时候你就应该考虑使用state了。</li>
</ul>
<p>两者在组件变化的时候的状态改变如下:</p>
<table>
<thead>
<tr>
<th>-</th>
<th><em>props</em></th>
<th><em>state</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>Can get initial value from parent Component?</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Can be changed by parent Component?</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Can set default values inside Component?*</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Can change inside Component?</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Can set initial value for child Components?</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Can change in child Components?</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
<p>那么两者如何合理的使用和规划呢。举例来说,在官网<a href="http://facebook.github.io/react/docs/thinking-in-react.html" target="_blank">《thinking-in-react》</a>有这样的一个例子，组件如下图，当需要有过滤和搜索功能的时候，其实组件就是一个“具有状态的组件”了，需要有state管理对应的状态。通过分析，我们可以得到对应的变量规划：</p>
<p><img src="http://gtms03.alicdn.com/tps/i3/TB1AAC0JpXXXXcaXpXX45OnYVXX-512-313.jpeg"></p>
<ul>
<li>用于表示所有产品列表的 products</li>
<li>用于表示过滤后的列表 (filterProducts)</li>
<li>表示是否使用过滤的功能(checkValue)</li>
<li>使用搜索过滤的关键词(searchValue)</li>
</ul>
<p>要分析变量是否是state，主要考虑这几个问题：</p>
<ul>
<li>变量是否会通过父组件传递参数，如果是，那么它肯定不是state，这里products 肯定不是state</li>
<li>变量是否会出现变化，如果不会出现变化，那么它肯定不是state</li>
<li>你会不会根其他的state或者props计算这个值，如果是经过计算得到的，那么它一定不是state，由此可见filterProducts也不是state<br>再考虑 checkValue和 searchValue在本质上是随组件内部改变的，所以，这两个变量应该作为state管理。所以最后的程序如下</li>
</ul>
<p></p><p data-height="268" data-theme-id="11872" data-slug-hash="meJwYO" data-default-tab="result" data-user="zhangmeng712" class="codepen">See the Pen <a href="http://codepen.io/zhangmeng712/pen/meJwYO/" target="_blank" rel="external">React filter list demo</a> by zhangmeng (<a href="http://codepen.io/zhangmeng712" target="_blank" rel="external">@zhangmeng712</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="3、生命周期详情分析"><a href="#3、生命周期详情分析" class="headerlink" title="3、生命周期详情分析"></a>3、生命周期详情分析</h3><h4 id="1-初始化阶段"><a href="#1-初始化阶段" class="headerlink" title="1) 初始化阶段"></a>1) 初始化阶段</h4><ul>
<li>getDefaultProps</li>
<li>getInitialState</li>
<li>propTypes</li>
<li>Mixins</li>
<li>statics</li>
<li>displayName</li>
</ul>
<p><strong>getDefaultProps</strong>初始化参数使用，当组件类被创建的时候会被调用一次。输入为函数类型，返回object为this.props的初始化值，当父组件没有指定具体参数的时候，参数会在这个方法中被详细映射，此外 为了增加程序的可读性和容错性，建议在这个方法中指定好参数的初始值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*Input.jsx*/</span></div><div class="line"><span class="comment">/*Form是input的父组件*/</span></div><div class="line"><span class="built_in">module</span>.exports = React.createClass(&#123;</div><div class="line">    <span class="attr">displayName</span>: <span class="string">'Input'</span>,</div><div class="line">    <span class="attr">getDefaultProps</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">//父组件中具体的参数映射，为了程序更加清晰，建议所有的props都在getDefaultProps中定义</span></div><div class="line">      model: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">value</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">error</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">enabled</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* Form.jsx */</span></div><div class="line"><span class="built_in">module</span>.exports = React.createClass(&#123;</div><div class="line">	<span class="attr">displayName</span>: <span class="string">'Form'</span>,</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span>  (<span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">Input</span> <span class="attr">model</span>=<span class="string">&#123;fieldModel&#125;</span></span></div><div class="line">                      <span class="attr">ref</span>=<span class="string">&#123;fieldModel.name&#125;/</span>&gt;</div><div class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span>);      </div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>getInitialState</strong>初始化state使用，在组件mount之前被调用一次。输入为函数，返回object为this.state的初始化值。<br><strong>propTypes</strong>用于属性的验证使用，输入为object。如果输入的类型和验证中设置的类型不符，在dev环境会给出提示。除了React内置的类型如 React.PropTypes.array，还支持自定义类型，详情见<a href="https://facebook.github.io/react/docs/reusable-components.html" target="_blank">Reusable Components.</a> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ComponentBox = React.createClass(&#123;      </div><div class="line">        <span class="comment">//默认值设置</span></div><div class="line">        getDefaultProps: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">initalX</span>: <span class="number">14</span>,</div><div class="line">                <span class="attr">initalProp</span>: <span class="string">'11'</span>,  <span class="comment">//内置校验</span></div><div class="line">                customProp: <span class="string">'hi'</span> <span class="comment">//自定义校验</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//允许校验属性的方法，只在dev环境会显示warn</span></div><div class="line">        propTypes: &#123;</div><div class="line">            <span class="comment">//React内置类型</span></div><div class="line">            initalProp: React.PropTypes.array,</div><div class="line">            <span class="comment">//自定义类型</span></div><div class="line">            customProp: <span class="function"><span class="keyword">function</span> (<span class="params">props, propName,componentName</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (props[propName] !== <span class="string">'hello'</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Validation failed, customProp value needs to be hello'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> compInstance = React.render(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ComponentBox</span> /&gt;</span>,</span></div><div class="line">            document.getElementById('content') //DOM Element</div><div class="line">    );</div></pre></td></tr></table></figure>
<p><img src="http://gtms01.alicdn.com/tps/i1/TB1PGy_JpXXXXamXFXX.YGSWpXX-1010-59.jpg"><br><strong>Mixins<array></array></strong>输入为array类型，用于定义组件间共享的方法，其中的方法可以是生命周期的方法，也可以是自定义方法。不过有几点需要注意：</p>
<ul>
<li>定义在其内部的方法会优先于类上的方法执行</li>
<li>在Mixins中和类上同时定义render方法会抛出异常（Uncaught Error: Invariant Violation: ReactClassInterface: You are attempting to define <code>render</code> on your component more than once）</li>
<li>在Mixins数组中定义同样名称的非生命周期方法也会抛出异常（Uncaught Error: Invariant Violation: ReactClassInterface: You are attempting to define <code>logFunc</code> on your component more than once. ）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> commonMixins = &#123;</div><div class="line">    	<span class="attr">getDefaultProps</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		<span class="keyword">return</span> &#123;</div><div class="line">    			<span class="attr">initalY</span>: <span class="number">20</span></div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> commonMixins1 = &#123;</div><div class="line">    	<span class="comment">//定义2个render定义会抛出异常</span></div><div class="line">    	<span class="comment">//        render: function () &#123;</span></div><div class="line">    	<span class="comment">//</span></div><div class="line">    	<span class="comment">//        &#125;</span></div><div class="line">    	<span class="comment">// 定义同样名称的非生命周期方法也会抛出异常</span></div><div class="line">    	logFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		<span class="built_in">console</span>.log(<span class="string">'Mixins log method'</span>)</div><div class="line">    	&#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> commonMixins2 = &#123;</div><div class="line">    	<span class="attr">logFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		<span class="built_in">console</span>.log(<span class="string">'Mixins log method'</span>)</div><div class="line">    	&#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> ComponentBox = React.createClass(&#123;</div><div class="line">    	<span class="attr">mixins</span>: [commonMixins,commonMixins1,commonMixins2]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> compInstance = React.render( <span class="xml"><span class="tag">&lt; <span class="attr">ComponentBox</span> / &gt;</span> ,</span></div><div class="line">    	document.getElementById('content') //DOM Element</div><div class="line">    );</div></pre></td></tr></table></figure>
<p><strong>statics</strong>类上的静态方法，可以在实例化之前被类自己调用。<br><strong>displayName</strong>用于在调试信息中标示组件，JSX会自动的设置它的值</p>
<h4 id="2-Mounting阶段"><a href="#2-Mounting阶段" class="headerlink" title="2) Mounting阶段"></a>2) Mounting阶段</h4><ul>
<li>componentWillMount</li>
<li>componentDidMount<br><strong>componentWillMount</strong>只会被调用一次。运行于初始化之后，render方法之前。当在此函数中调用setState后，render会显示被修改的state内容，注意，尽管state内容被改变了，但是不会再多次调用render。<br><strong>componentDidMount</strong>在render执行之后被调用，这个方法只会被调用一次。在这个方法中，可以通过React.findDOMNode(this)对组件的dom元素进行操作，子组件的componentDidMount方法会优先于父组件的componentDidMount方法被调用。我们会在这个方法中执行ajax请求或者调用timer或者用其他类库进行交互。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">componentDidMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'-------componentDidMount execute-------'</span>)</div><div class="line">            <span class="keyword">var</span> input = $(<span class="string">'input[type="text"]'</span>);</div><div class="line">            input.focus();</div><div class="line">            <span class="keyword">var</span> cityName = <span class="keyword">this</span>.props.propValue;</div><div class="line">            $.get(<span class="string">'http://api.openweathermap.org/data/2.5/weather?q='</span> + cityName , <span class="function"><span class="keyword">function</span> (<span class="params">data,status</span>) </span>&#123;</div><div class="line">                  <span class="keyword">if</span> (status === <span class="string">'success'</span>) &#123;</div><div class="line">                        <span class="keyword">var</span> weather = data.weather || [];</div><div class="line">                        <span class="keyword">if</span> (weather.length &amp;&amp; weather[<span class="number">0</span>]) &#123;</div><div class="line">                            <span class="keyword">this</span>.setProps(&#123;</div><div class="line">                                <span class="attr">weather</span>: weather[<span class="number">0</span>].description</div><div class="line">                            &#125;);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                  &#125;</div><div class="line">            &#125;.bind(<span class="keyword">this</span>))</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h4 id="3-数据更新阶段"><a href="#3-数据更新阶段" class="headerlink" title="3) 数据更新阶段"></a>3) 数据更新阶段</h4><ul>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate</li>
<li>componentDidUpdate<br><strong>componentWillReceiveProps</strong>当新的props参数被发现时，就会调用这个方法，普通的render之后是不调用这个函数的。改变之前的props参数可以通过 this.props获得，新的参数可以通过第一个入参获得。在这个方法中调用setState不会触发额外的render调用。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span> (<span class="params">nextProps</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">'-------componentWillReceiveProps execute-------'</span>, <span class="string">'old weather is this.props.weather:'</span>, <span class="keyword">this</span>.props.weather, <span class="string">'new props is nextProps.weahter:'</span> + nextProps.weather);</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p><strong>shouldComponentUpdate</strong>当props和state变化后被触发，初次render和强制更新的时候此方法不会被调用。当你希望某个props或者state的值改变的时候，不需要render被再次执行，就可以在shouldComponentUpdate中return false来实现，而此时接下来的 componentWillUpdate 和componentDidUpdate也不会执行。默认shouldComponentUpdate会自动返回true，但是你可以通过比较参数的变化来重写这个函数，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">nextProps, nextState</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'-------shouldComponentUpdate execute-------'</span>)</div><div class="line">            <span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (nextProps.weather == <span class="string">'light rain'</span> ) &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> flag;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><strong>componentWillUpdate</strong>判断完是否能调用render之后，就会执行componentWillUpdate，这个函数是用作render之前发生更新的改变。在这个方法中不能使用setState方法，如果要更新state，在componentWillReceiveProps函数中进行处理。<br><strong>componentDidUpdate</strong>当参数变更完成，render执行完成DOM完全被更新之后会触发，可用于操作新更新的DOM元素，入参为 prevProps和 prevState，以防操作中需要变更前的数据</p>
<h4 id="4-Unmounting阶段"><a href="#4-Unmounting阶段" class="headerlink" title="4) Unmounting阶段"></a>4) Unmounting阶段</h4><ul>
<li>componentWillUnmount<br><strong>componentDidUpdate</strong>当组件从DOM中销毁的时候调用，可在函数中对timer和不需要的dom元素进行清理<br>关于组件的生命周期执行顺序和props更新流程等可以参考以下的例子：<br><p data-height="452" data-theme-id="11872" data-slug-hash="BoNbZz" data-default-tab="result" data-user="zhangmeng712" class="codepen">See the Pen <a href="http://codepen.io/zhangmeng712/pen/BoNbZz/" target="_blank" rel="external">React lifycycle testing</a> by zhangmeng (<a href="http://codepen.io/zhangmeng712" target="_blank" rel="external">@zhangmeng712</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><script async src="//assets.codepen.io/assets/embed/ei.js"></script>



</li>
</ul>
<h2 id="二、你应该掌握的API用法"><a href="#二、你应该掌握的API用法" class="headerlink" title="二、你应该掌握的API用法"></a>二、你应该掌握的API用法</h2><h3 id="1、常用-API"><a href="#1、常用-API" class="headerlink" title="1、常用 API"></a>1、常用 API</h3><ul>
<li>React.createClass</li>
<li>React.render</li>
<li>React.findDOMNode</li>
<li>React.createElement:创建一个<a href="https://facebook.github.io/react/docs/glossary.html" target="_blank">virtual dom</a>进行渲染，可以使用React.render进行加载</li>
<li>React.Children: 用于处理组件中的this.props.children<ul>
<li>React.Children.map</li>
<li>React.Children.only</li>
<li>React.Children.forEach</li>
<li>React.Children.count</li>
</ul>
</li>
</ul>
<h3 id="2-组件相关API"><a href="#2-组件相关API" class="headerlink" title="2 组件相关API"></a>2 组件相关API</h3><ul>
<li>this.setState：设置state，除了支持key value的传送方式，还支持传入fn, 注意通过上述的描述可以调用它的生命周期方法为:componentDidMount以及componentWillMount（不会触发刷新render，但是可以赋值）。</li>
<li>this.setProps：设置props</li>
<li>this.props.children：表示在实例化的时候传入组件的所有子节点，可以通过React.Children来统一处理渲染到页面上</li>
<li>this.props.refs：render中Dom Node可以用ref来标示，这样就可以利用React.findDOMNode(this.refs.xx)来获取对应的DOM元素了。ref可以传入名称，也可以传入函数<a href="https://facebook.github.io/react/docs/more-about-refs.html" target="_blank">更多详情</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//setState的函数传入，入参为之前的state对象，还有当前的props对象</span></div><div class="line"> <span class="keyword">this</span>.setState(<span class="function"><span class="keyword">function</span> (<span class="params">prevState, currentProps</span>) </span>&#123;</div><div class="line">                                <span class="keyword">return</span> &#123;</div><div class="line">                                    <span class="attr">stateValue</span>: <span class="string">'new stateValue'</span></div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//操作this.props.children</span></div><div class="line"> <span class="keyword">var</span> ComponentBox = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">                &#123;</div><div class="line">                       //能够渲染 </div><div class="line">				 React.Children.map(this.props.children, function (child) &#123;</div><div class="line">                            return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        &#125;)</div><div class="line"></div><div class="line">                &#125;</div><div class="line">                &#123;</div><div class="line">                        //  返回不是object ？渲染不出</div><div class="line">                        React.Children.forEach(this.props.children, function (child) &#123;</div><div class="line">                            return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        &#125;)</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>)</div><div class="line">        &#125; </div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> compInstance = React.render(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ComponentBox</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">ComponentBox</span>&gt;</span></span>,</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>) <span class="comment">//DOM Element</span></div><div class="line">    );</div><div class="line"></div><div class="line"><span class="comment">//refs的用法</span></div><div class="line">&lt;input ref=&#123; <span class="function"><span class="keyword">function</span>(<span class="params">component</span>)</span>&#123; React.findDOMNode(component).focus();&#125; &#125; /&gt;</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"myTextInput"</span> <span class="attr">defaultValue</span>=<span class="string">&#123;this.props.propValue&#125;</span> /&gt;</span></span></div><div class="line"> var input = React.findDOMNode(this.refs.myTextInput)</div></pre></td></tr></table></figure>
<h3 id="3、Add-on-API"><a href="#3、Add-on-API" class="headerlink" title="3、Add-on API"></a>3、Add-on API</h3><ul>
<li><p>Animation API:</p>
<ul>
<li><strong>ReactCSSTransitionGroup</strong> 用于控制动画的标签。</li>
<li><strong>transitionName</strong> 定义动画的class前缀，以下例为基础默认在<reactcsstransitiongroup>标签内新增的的元素，动画效果的className为example-enter example-enter-active；元素被删除时候效果的className为 example-leave example-leave-active</reactcsstransitiongroup></li>
<li><strong>transitionAppear</strong> v0.13开始有的方法，用于书写初始化的动画效果，默认是false。注意：一定要先让ReactCSSTransitionGroup这个标签渲染出来，然后再在标签内增加元素，否则效果不生效。</li>
<li><p>有人在使用这个Add-on的时候遇到了动画时序的问题，也可以使用自定义的动画解决，<a href="http://coenraets.org/blog/2014/12/animated-page-transitions-with-react-js/" target="_blank">参考这个例子</a></p>
<pre><code class="javascript">&lt;ReactCSSTransitionGroup transitionName=<span class="string">"example"</span> transitionAppear={<span class="literal">true</span>}&gt;
                  {items}
                  &lt;<span class="regexp">/ReactCSSTransitionGroup&gt;</span>
</code></pre>
<p></p><p data-height="268" data-theme-id="11872" data-slug-hash="bVEomJ" data-default-tab="result" data-user="zhangmeng712" class="codepen">See the Pen <a href="http://codepen.io/zhangmeng712/pen/bVEomJ/" target="_blank" rel="external">react animtion test</a> by zhangmeng (<a href="http://codepen.io/zhangmeng712" target="_blank" rel="external">@zhangmeng712</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
</li>
</ul>
</li>
<li><p>Test-Utils API:Test-Utils API: 一般的类库很少提供这种Add-on，更多是通过工具对其进行补充，例如Angular的<a href="https://angular.github.io/protractor/#/" target="_blank">protractor</a>，以及Polymer的<a href="https://github.com/Polymer/web-component-tester" target="_blank">web-componnets-tester</a>，这点React还是想的很全面的，当然它也有对其组件测试的Jest框架，但是通过它的Test-Utils可以结合其它的测试框架进行测试。</p>
<ul>
<li>Simulate点击：React.addons.TestUtils.Simulate.click(node);</li>
<li>渲染组件：ReactTestUtils.renderIntoDocument(<list>);</list></li>
<li>获取组件:findRenderedDOMComponentWithClass</li>
<li>Mock组件：mockComponent</li>
<li>参考实例1：<a href="http://maketea.co.uk/2014/05/22/building-robust-web-apps-with-react-part-3.html" target="_blank">Building robust web apps with React: Part 3, testing with Jasmine</a> </li>
<li>参考实例2：<a href="http://island205.com/2015/06/04/write-caculator-with-reactjs-and-tdd/" target="_blank">测试驱动编写 React 简易计算器</a></li>
</ul>
</li>
</ul>
<h2 id="三-组件的拆分和数据的传递"><a href="#三-组件的拆分和数据的传递" class="headerlink" title="三 组件的拆分和数据的传递"></a>三 组件的拆分和数据的传递</h2><p>一般来说，稍微复杂的组件可以被拆分成若干组件（拆分本着一个组件只做一件事情的原则，参见<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">Single_responsibility_principle</a>）。合理的组件拆分会让React组件的开发复用性更强，那么在组件中如何管理组件间数据的传递？具体可以参考<a href="http://ctheu.com/2015/02/12/how-to-communicate-between-react-components/" target="_blank">《How to communicate between React components》</a>这篇文章，讲解的非常详细。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/uberVU/react-guide/blob/master/props-vs-state.md" target="_blank" rel="external">https://github.com/uberVU/react-guide/blob/master/props-vs-state.md</a></li>
<li><a href="http://ctheu.com/2015/02/12/how-to-communicate-between-react-components/#child_to_parent" target="_blank" rel="external">http://ctheu.com/2015/02/12/how-to-communicate-between-react-components/#child_to_parent</a></li>
<li><a href="http://facebook.github.io/react/docs/thinking-in-react.html" target="_blank" rel="external">http://facebook.github.io/react/docs/thinking-in-react.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React火了很久了，一直都停留在照葫芦画瓢按照example凑数的基础上，但是如果真的要了解一个框架，它的生命周期和核心API是最重要的部分了，下面我们就来聊聊React的生命周期、核心API的用法以及React工具集，在使用React进行深度开发的时候，一定会事半功倍。
    
    </summary>
    
      <category term="javascript" scheme="https://mengbaby.github.io/categories/javascript/"/>
    
      <category term="react" scheme="https://mengbaby.github.io/categories/javascript/react/"/>
    
    
      <category term="React" scheme="https://mengbaby.github.io/Mtags/React/"/>
    
  </entry>
  
  <entry>
    <title>mobile H5布局大全-rem flexbox详解</title>
    <link href="https://mengbaby.github.io/2015/03/15/369/"/>
    <id>https://mengbaby.github.io/2015/03/15/369/</id>
    <published>2015-03-15T01:29:14.000Z</published>
    <updated>2017-04-17T07:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>\</p><p>现在无线端的开发如火如荼，不同于国外网站经常做的响应式设计,国内很多大型网站都会专门实现基于H5的手机端mobile站点代码，淘宝、天猫、京东、百度等等，大抵是为了尽可能的减少设计和代码维护成本，也可能是为了实现代码的最小化减少请求代码量，虽然个人还是更倾向于响应式设计，但了解一些具有“无线端前端”开发的知识也未尝不是件好事。说起无线端开发，布局应该是最最具代表性的专题之一，因为不考虑ie系列的兼容性，因此除了pc端常常使用的浮动、表格、百分比布局等等 ，rem和flexbox更是火热的无线端布局实现手段，下面我们就从最基本的概念css像素看起，彻底的了解无线端的布局~~</p><p></p>
<h2 id="一、viewport和像素"><a href="#一、viewport和像素" class="headerlink" title="一、viewport和像素"></a>一、viewport和像素</h2><h3 id="物理像素、CSS像素、独立像素和devicePixelRatio"><a href="#物理像素、CSS像素、独立像素和devicePixelRatio" class="headerlink" title="物理像素、CSS像素、独立像素和devicePixelRatio"></a>物理像素、CSS像素、独立像素和devicePixelRatio</h3><p><img src="http://dj1211.com/examples/mobile-layout/image/pixels.jpg" width="800px"></p>
<ul>
<li>物理像素 device pixel: 物理像素指显示设备上的物理像素点</li>
<li>CSS像素 css pixel: 指我们写页面时理解的那个像素单位px</li>
<li>独立像素dp: （dips device independent pixels）: DP用在Android上，PT用在Apple上</li>
<li>衡量设备的物理像素密度 DPI 和 PPI <ul>
<li>DPI 指 Dots Per Inch（dpi ldpi mdpi hdpi for android）</li>
<li>PPI指 Pixels Per Inch。 </li>
<li><a href="http://dpi.lv/" target="_blank" rel="external">http://dpi.lv/</a></li>
</ul>
</li>
<li>window.devicePixelRatio = 物理像素/dips(dp) 等效于ddpx</li>
<li>dppx : device pixel / css pixel;    </li>
<li>分辨率（Resolution）：屏幕区域的宽高所占像素数</li>
<li><a href="http://www.w3ctech.com/topic/674" target="_blank" rel="external">设计师DPI指南</a></li>
</ul>
<h3 id="viewport和devicePixelRatio"><a href="#viewport和devicePixelRatio" class="headerlink" title="viewport和devicePixelRatio"></a>viewport和devicePixelRatio</h3><ul>
<li>meta viewport<ul>
<li>width:sets the width of the layout view port to the indicated value. device-width</li>
<li>initial-scale: sets the initial zoom factor of the page and the width of the layout viewport. <ul>
<li>minimum-scale: sets the minimum zoom level (how much the user can zoom out).</li>
<li>maximum-scale: sets the maximum zoom level (how much the user can zoom in).</li>
<li>user-scalable: prevents user zooming when set to no. This is evil and we will demonstratively ignore it.</li>
</ul>
</li>
</ul>
</li>
<li><p>使用viewport和devicePixelRatio实现兼容retina屏幕的像素<br><img src="http://dj1211.com/examples/mobile-layout/image/meta-1px.jpg" width="400px"><br><img src="http://dj1211.com/examples/mobile-layout/image/meta-1px-retina.jpg" width="400px"></p>
</li>
<li><p>devicePixelRatio测试：<a href="http://www.quirksmode.org/m/tests/widthtest_vpdevice.html" target="_blank" rel="external">http://www.quirksmode.org/m/tests/widthtest_vpdevice.html</a></p>
</li>
<li><p>css中使用devicePixelRatio</p>
<pre><code>.css{
    background-image: url(img_1x.png);
}

/* 高清显示屏(设备像素比例大于等于2)使用2倍图  */
@media only screen and (-webkit-min-device-pixel-ratio:2){
    .css{
        background-image: url(img_2x.png);
    }
}

/* 高清显示屏(设备像素比例大于等于3)使用3倍图  */
@media only screen and (-webkit-min-device-pixel-ratio:3){
    .css{
        background-image: url(img_3x.png);
    }
}
</code></pre></li>
</ul>
<p><img src="http://p1.qhimg.com/t0194e590e2849b5b98.png" width="600px"> </p>
<ul>
<li>vh单位：相对于视口的高度。视口被均分为100单位的vh</li>
</ul>
<h2 id="二、REM布局"><a href="#二、REM布局" class="headerlink" title="二、REM布局"></a>二、REM布局</h2><h3 id="rem原理"><a href="#rem原理" class="headerlink" title="rem原理"></a>rem原理</h3><ul>
<li>使用相对尺寸的一种，随着页面宽度的改变，html的font改变，控制页面用rem标记元素的尺寸</li>
<li>相对于百分比布局，控制局部尺寸更加方便</li>
<li>参考 <a href="http://m.taobao.com/" target="_blank" rel="external">淘宝无线首页</a></li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://github.com/zhangmeng712/mobile-layout/blob/master/rem/rem.js" target="_blank" rel="external">代码</a></h3><ul>
<li>需要设置基准元素还有最大的字体元素（防止全屏）</li>
<li>核心计算公式<ul>
<li>页面宽度：getBoundingClientRect还是width</li>
<li>htmlFont = min[pageWidth/(psdWidth/basicFont, maxFont)</li>
</ul>
</li>
<li>text-size-adjust调整100%</li>
<li>html font size的设置 拼css完成 而不是document.documentElement.style.fontSize</li>
<li>绑定处理 DOMContentLoaded load resize 从未设置viewport的网页进入重新设置一下 pageshow/load persisted(是否后退进入)</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a><a href="http://dj1211.com/examples/mobile-layout/rem/rem.html" target="_blank" rel="external">实战</a></h3><h3 id="无线团队的lib-flexible"><a href="#无线团队的lib-flexible" class="headerlink" title="无线团队的lib.flexible"></a>无线团队的lib.flexible</h3><ul>
<li>1 <a href="https://github.com/amfe/lib.flexible" target="_blank" rel="external">代码</a></li>
<li><p>2 不同点</p>
<ul>
<li>为了快速兼容vh单位 将布局分为了100份</li>
<li>根据dpr控制meta的值，这样可以保证分别处理不同dpr的样式，但是增加了开发复杂度</li>
</ul>
</li>
</ul>
<h2 id="三、Flexbox盒模型"><a href="#三、Flexbox盒模型" class="headerlink" title="三、Flexbox盒模型"></a>三、Flexbox盒模型</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://mdn.mozillademos.org/files/3739/flex_terms.png"></p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul>
<li>2009: <a href="http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/" target="_blank" rel="external">http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/</a></li>
<li>2011: <a href="http://www.w3.org/TR/2011/WD-css3-flexbox-20110322/" target="_blank" rel="external">http://www.w3.org/TR/2011/WD-css3-flexbox-20110322/</a></li>
<li><p>2015: <a href="http://www.w3.org/TR/2014/WD-css-flexbox-1-20140925/" target="_blank" rel="external">http://www.w3.org/TR/2014/WD-css-flexbox-1-20140925/</a></p>
</li>
<li><p>display: -webkit-box;     </p>
</li>
<li>display: -moz-box; //2009</li>
<li>display: -ms-flexbox;//2011</li>
<li>display: -webkit-flex;</li>
<li>display: flex; //now</li>
</ul>
<h3 id="‘APIS’"><a href="#‘APIS’" class="headerlink" title="‘APIS’"></a>‘APIS’</h3><ul>
<li><a href="http://codepen.io/zhangmeng712/pen/pveaxK?editors=110" target="_blank" rel="external">demo</a></li>
<li><p>flex type</p>
<ul>
<li>display: inline-flex (make element inline-block)</li>
<li>display: flex (make element block)</li>
</ul>
</li>
<li><p>direction</p>
<ul>
<li>flex-direction:row row-reverse column column</li>
<li>box-orient:horizontal vertical</li>
</ul>
</li>
<li><p>wrap</p>
<ul>
<li>flex-wrap: nowrap | wrap(if not enough place will put content to the next row/column ) | wrap-reverse (should not use in mobile safari)</li>
</ul>
</li>
<li><p>flex-flow(direction wrap)</p>
<ul>
<li>flex-flow: row nowrap;</li>
</ul>
</li>
<li><p>justify-content(horizontal distribution)</p>
<ul>
<li>justify-content: flex-start | flex-end | center | space-between | space-around;(should not use in mobile safari)</li>
<li><p>horizontal center:</p>
<pre><code>-webkit-box-pack:center;
-webkit-justify-content:center;
-ms-flex-pack:center;
justify-content:center;
</code></pre></li>
</ul>
</li>
<li><p>align-items (vertical distribution)</p>
<ul>
<li>align-items: flex-start | flex-end | center | baseline | stretch</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/CSS/align-items</a></li>
</ul>
</li>
</ul>
<pre><code>-webkit-box-align:center;
-webkit-align-items:center;
-ms-flex-align:center;
align-items:center;
</code></pre><ul>
<li><p>align-self</p>
<ul>
<li>used for flex items to change its align-items</li>
<li>align-items used for flex container</li>
</ul>
</li>
<li><p>flex-grow flex-shrink</p>
</li>
</ul>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul>
<li><a href="https://github.com/philipwalton/flexbugs" target="_blank" rel="external">flexbugs</a></li>
</ul>
<h3 id="autoprefix工具"><a href="#autoprefix工具" class="headerlink" title="autoprefix工具"></a><a href="http://dj1211.com/examples/mobile-layout/autoprefix/tools.html" target="_blank" rel="external">autoprefix工具</a></h3><h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><ul>
<li><p><a href="http://localhost/mbp-new/debug.html#" target="_blank" rel="external">两栏布局</a></p>
<p><img src="http://dj1211.com/examples/mobile-layout/image/flex-box-subway.jpg" width="160px"></p>
</li>
<li><p><a href="flexbox/examples/mix-layout.html">复杂布局</a>  </p>
<p><img src="http://dj1211.com/examples/mobile-layout/image/mix-layout.jpg"></p>
</li>
</ul>
<h2 id="四、常见布局-等分和居中"><a href="#四、常见布局-等分和居中" class="headerlink" title="四、常见布局-等分和居中"></a>四、常见布局-等分和居中</h2><ul>
<li>实现手段：float rem flex box table等等（inline-block局部手机浏览器会有bug）</li>
<li><a href="http://dj1211.com/examples/mobile-layout/basic/layout.html" target="_blank" rel="external">等分布局实现方案demo</a></li>
</ul>
<h2 id="五、常见布局-图片布局"><a href="#五、常见布局-图片布局" class="headerlink" title="五、常见布局-图片布局"></a>五、常见布局-图片布局</h2><ul>
<li>background-size</li>
<li>图片自适应：padding-bottom</li>
<li>srcset（兼容性不好）</li>
<li>图片优化（压缩比和Webp）<ul>
<li><a href="http://zhitu.tencent.com/" target="_blank" rel="external">webp</a> </li>
<li><a href="http://www.atatech.org/articles/6628" target="_blank" rel="external">淘宝解决方案 内网</a></li>
</ul>
</li>
<li><a href="http://dj1211.com/examples/mobile-layout/basic/image.html" target="_blank" rel="external">无线端图片响应式demo</a></li>
</ul>
<h2 id="六、代码转化为模板建立解决方案"><a href="#六、代码转化为模板建立解决方案" class="headerlink" title="六、代码转化为模板建立解决方案"></a>六、代码转化为模板建立解决方案</h2><ul>
<li><a href="http://philipwalton.github.io/solved-by-flexbox/" target="_blank" rel="external">solved by Flexbox</a></li>
<li><a href="http://dj1211.com/examples/mobile-layout/index.html" target="_blank" rel="external">demo</a></li>
</ul>
<h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><p></p><p>测试新手段可以选择不同机型不同的ADT实现测试-虽然付费但是相当的赞~~~</p><p></p>
<ul>
<li><a href="http://www.browserstack.com/" target="_blank" rel="external">browserstack</a></li>
</ul>
<p><img src="http://dj1211.com/examples/mobile-layout/image/debug-tools.jpg" width="600px"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;\&lt;/p&gt;&lt;p&gt;现在无线端的开发如火如荼，不同于国外网站经常做的响应式设计,国内很多大型网站都会专门实现基于H5的手机端mobile站点代码，淘宝、天猫、京东、百度等等，大抵是为了尽可能的减少设计和代码维护成本，也可能是为了实现代码的最小化减少请求代码量，虽然个人还是更倾向
    
    </summary>
    
      <category term="css3" scheme="https://mengbaby.github.io/categories/css3/"/>
    
      <category term="h5" scheme="https://mengbaby.github.io/categories/css3/h5/"/>
    
      <category term="mobile" scheme="https://mengbaby.github.io/categories/css3/h5/mobile/"/>
    
    
      <category term="css3" scheme="https://mengbaby.github.io/Mtags/css3/"/>
    
      <category term="flexbox" scheme="https://mengbaby.github.io/Mtags/flexbox/"/>
    
      <category term="mobile" scheme="https://mengbaby.github.io/Mtags/mobile/"/>
    
      <category term="mobile-layout" scheme="https://mengbaby.github.io/Mtags/mobile-layout/"/>
    
      <category term="rem" scheme="https://mengbaby.github.io/Mtags/rem/"/>
    
      <category term="viewport" scheme="https://mengbaby.github.io/Mtags/viewport/"/>
    
  </entry>
  
  <entry>
    <title>css3和动画-part1-变换</title>
    <link href="https://mengbaby.github.io/2015/02/03/332/"/>
    <id>https://mengbaby.github.io/2015/02/03/332/</id>
    <published>2015-02-03T03:15:22.000Z</published>
    <updated>2017-04-17T06:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>常年开发web后台系统，实在厌恶了做不完的需求、调不完的接口、和各种数据交互，所以闲暇之余开始了动画和游戏的学习，也算一种调剂。动画比游戏应用更为广泛，所以我们先从动画说起，这系列教程主要包括如下几篇文章：</p><p></p>
<ul>
<li>css3和动画-part1  基础篇；css3动画基础和实例（有demo有真相 力求比w3cschool实用些）</li>
<li>css3和动画-part2  进阶篇；理论结合实际实现几个较为复杂但有意思的动画效果</li>
<li>css3和动画-part3  蛋疼篇；transform、matrix和贝塞尔曲线</li>
<li>javascript和动画-part1  姊妹篇；使用javascript完成动画</li>
<li>javascript和动画-part2  姊妹进阶篇；高性能js动画类库分析-snabbt和gsap</li>
</ul>
<p></p><p style="text-indent: 2em;">废话不说（此处省略XXXX个字），上来先总结一下动画的相关的知识，让大家有个大概的印象，然后再各个击破。css3动画有很多名词都比较相似，例如 transform transiton translate，参数用法也特别容易混，这里我主要按照我学习的线索作为提纲分块讲解，希望对大家有所帮助：</p><p></p>
<ul>
<li>实现各种变换效果的关键字：transform： translate opacity skew rotate…</li>
<li>静到动的实现函数：transition和animation</li>
<li>3D相关：translate3d perspective</li>
</ul>
<h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p> </p><p style="text-indent: 2em;">不谈代码，我们大概能想到的变换效果都有哪些呢？放大、缩小、旋转、显隐，上下左右移动， 扭曲等等。对于这些变换，css3为给我们提供了丰富的效果关键字，这篇文章主要谈论常用的、高效的变换。之所以说是高效的变换，其实主要是在渲染的过程中能够尽量减少浏览器Recalculate的变换效果，参见<a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="external">High Performance Animations</a>。这些变换有:</p>
<ul>
<li>Position：translate</li>
<li>Scale</li>
<li>Rotate</li>
<li>opacity</li>
</ul>
<h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>这个是个非常重要的关键字，他的作用是，transform：需要变换的属性 不同属性直接用空格分隔,举例来说要实现 某一文字放大并向右平移50像素，代码为：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.second</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1.1) <span class="built_in">translate</span>(50px, 0);</div><div class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">scale</span>(1.1) <span class="built_in">translate</span>(50px, 0);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1) <span class="built_in">translate</span>(50px, 0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面就具体讲讲，被transform的各种变换效果。</p>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><p>如果要实现元素从某一位置变换到另一个位置的时候，我们可以使用top left进行变换， 也可以使用margin-left margin-top，但是，其实这些都是会触发浏览器的Recalculate，会让动画出现卡顿，实现效率也非常的低下，参考<a href="http://jsperf.com/translate3d-vs-xy/57" target="_blank" rel="external">jsperf</a>做的对比，也可以戳戳Paul Irish的<a href="http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="external">文章</a>。如果改用translate这个关键字就可以非常cheaply的实现动画效果。translate主要是用来改变元素坐标的一种变换。API为：</p>
<ul>
<li>transform:  translate(tx[, ty])  /<em> one or two <translation-value> values </translation-value></em>/</li>
<li>transform:  translateX(tx)</li>
<li>transform:  translateY(ty)</li>
</ul>
<p>常见的场景就是使用translate实现轮播的效果，下面是轮播的最简单的一个demo实现：</p>
<p></p><p data-height="357" data-theme-id="7928" data-slug-hash="wBrwwN" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/zhangmeng712/pen/wBrwwN/" target="_blank" rel="external">wBrwwN</a> by zhangmeng712 (<a href="http://codepen.io/zhangmeng712" target="_blank" rel="external">@zhangmeng712</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>
最核心的代码就是：


<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.card-list</span><span class="selector-class">.second</span> &#123;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-540px, 0px);</div><div class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(-540px, 0px);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-540px, 0px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>

_**Tips**_: 我们不是电脑，没法记得哪些需要前缀哪些不需要，这里推荐给大家一个工具，[autoprefixer](https://github.com/postcss/autoprefixer)这个是在[caniuse](http://caniuse.com/)这个网站的基础上用来帮我们实现兼容的前缀的，我们可以只写最基本的，他自动会帮我们补全,[在线地址](http://simevidas.jsbin.com/gufoko/quiet)。

### scale

scale如同它的英文含义一样，是用来把元素进行放大缩小的，它也是非常实用的，先看API：

*   transform:  scale(sx[, sy]);
*   transform:  scaleX(sx);*   transform:  scaleY(sy);

scale最常见的应用就是在鼠标hover的时候把图标进行放大，以表示选中状态，引起注意，如下面这个demo，这里也有个工具网站推荐[shapeofcss](http://css-tricks.com/examples/ShapesOfCSS/)，在这里面可以找到我们常见的形状的实现。例子中同时使用了[webfontIcon](http://fortawesome.github.io/Font-Awesome/examples/)，这个技术让前端彻底告别切图的时代。


<p data-height="357" data-theme-id="7928" data-slug-hash="myBMZX" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/zhangmeng712/pen/myBMZX/" target="_blank" rel="external">wBrwwN</a> by zhangmeng712 (<a href="http://codepen.io/zhangmeng712" target="_blank" rel="external">@zhangmeng712</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<script async src="//codepen.io/assets/embed/ei.js"></script>


<h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><p>rotate是用于让元素旋转的效果。旋转效果常配合着3D的效果一起使用，实现空间化的效果；也经常配合animation实现loading spinner的效果，如下demo：</p>
<ul>
<li>transform:  rotate(angle);       /<em> an <angle>, e.g., rotate(30deg) </angle></em>/</li>
<li>transform:  rotateX(angle);*   transform:  rotateY(angle);</li>
</ul>
<p></p><p data-height="357" data-theme-id="7928" data-slug-hash="qEPVRQ" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/zhangmeng712/pen/qEPVRQ/" target="_blank" rel="external">qEPVRQ</a> by zhangmeng712 (<a href="http://codepen.io/zhangmeng712" target="_blank" rel="external">@zhangmeng712</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//codepen.io/assets/embed/ei.js"></script>

<h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><p>opacity的用途其实更加的广泛，不管是rotate也好scale也好，如果没有一些opacity的变化就会让变换十分的生硬。配合opacity和display的切换是会导致重排的。所以如果需要元素的隐藏显示，最好采用opacity来控制。opacity还常常和animation配合起来，用于实现fadeIn fadeOut等人性化的动画设计。注意 opacity虽然是一种效果，但是并不需要使用transform来控制。API非常简单: opacity:0.4，记得每次开一个新的项目都会有实现transparent全兼容的css的代码，在此也为大家提供一下,见<a href="http://css-tricks.com/snippets/css/cross-browser-opacity/" target="_blank" rel="external">CssTricks</a>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.transparent_class</span> &#123;</div><div class="line">  <span class="comment">/* IE 8 */</span></div><div class="line">  <span class="attribute">-ms-filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)"</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* IE 5-7 */</span></div><div class="line">  <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=50);</div><div class="line"></div><div class="line">  <span class="comment">/* Netscape */</span></div><div class="line">  <span class="attribute">-moz-opacity</span>: <span class="number">0.5</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* Safari 1.x */</span></div><div class="line">  <span class="attribute">-khtml-opacity</span>: <span class="number">0.5</span>;</div><div class="line"></div><div class="line">  <span class="comment">/* Good browsers */</span></div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本来想一篇文章把“变换” “动画” 还有“3D效果”一起讲解，但发现要说的东西太多了，为了保证质量，拆分成了三篇，力求把动画的内容涵盖完全，敬请期待哦~</p>
<p>参考：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="external">mozilla</a></li>
<li><a href="http://css-tricks.com/almanac/properties/t/transform/" target="_blank" rel="external">css tricks</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常年开发web后台系统，实在厌恶了做不完的需求、调不完的接口、和各种数据交互，所以闲暇之余开始了动画和游戏的学习，也算一种调剂。动画比游戏应用更为广泛，所以我们先从动画说起，这系列教程主要包括如下几篇文章：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css3和动画-part1
    
    </summary>
    
      <category term="javascript" scheme="https://mengbaby.github.io/categories/javascript/"/>
    
      <category term="css3" scheme="https://mengbaby.github.io/categories/javascript/css3/"/>
    
    
      <category term="javascript" scheme="https://mengbaby.github.io/Mtags/javascript/"/>
    
      <category term="css3" scheme="https://mengbaby.github.io/Mtags/css3/"/>
    
      <category term="html5" scheme="https://mengbaby.github.io/Mtags/html5/"/>
    
  </entry>
  
</feed>
